@page "/kot/{TableId:int?}"
@layout Components.Layout.POSLayout
@using MAUIBLAZORHYBRID.Data.DTO
@using MAUIBLAZORHYBRID.Data.Data
@using MAUIBLAZORHYBRID.Services.Sync
@using MudBlazor
@using System.Globalization
@using System.Diagnostics
@inject ISnackbar Snackbar
@inject PosPageService PosService
@inject KOTService PageService
@inject IHotKOTSaveService _HotKOTSaveService
@inject IJSRuntime JS
@inject ISyncService SyncService
@inject HttpClient Http
@using System.Text.Json;
@inject AppState appState
@inject NavigationManager Nav
@inject BackgroundDataService BgService


<MudPaper Class="pos-screen">
    <div class="main-layout">
        <!-- First part: 75-80% width -->
        <div class="left-panel">

            <!-- Header part of first part -->
            <div class="header-part">


                <MudGrid >
                    <MudItem  sm="2">
                        <div class="header-details">
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.TableRestaurant" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Dining Space: <span id="diningspace">@diningspacename</span></span>
                            </div>
                        </div>

                    </MudItem>
                    <MudItem sm="3">
                        <MudAutocomplete T="Table"
                            ReadOnly="true"
                        Label="Table"
                        Value="selectedTable"
                        ValueChanged="HandleTableSelected"
                        SearchFunc="SearchTable"
                        ToStringFunc="(p) => p?.tableName"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        Clearable="true"
                        Immediate="true">
                            <ItemTemplate>
                                <div>@context.tableName</div>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem  sm="4">
                        <MudAutocomplete T="BillItem"
                        Label="Item"
                        Value="selectedItem"
                        ValueChanged="HandleProductSelected"
                        SearchFunc="SearchProducts"
                        ToStringFunc="(p) => p?.itemName"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        @ref="productRef"
                        Immediate="true">
                            <ItemTemplate>
                                <div>@context.itemName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="2">
                        <MudAutocomplete T="Unit"
                        @ref="unitRef"
                        Label="Unit"
                        Value="selectedUnit"
                        ValueChanged="HandleUnitSelected"
                        SearchFunc="SearchUnits"
                        ToStringFunc="(p) => p?.unitName"
                        Adornment="Adornment.None"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        Immediate="true" >
                            <ItemTemplate>
                                <div>@context.unitName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="1" Style="padding-left:0">
                        <MudTextField Immediate="true" T="int?" @ref="quantityRef" Label="Qty" @bind-Value="itemQuantity" OnKeyUp="onEnteronItemQuantity"></MudTextField>
                    </MudItem>


                </MudGrid>




            </div>

            <div class="body-part">

                <div class="category-list">
                    <div style="flex:none !important">
                        <MudTextField @bind-Value="_categorySearch" Placeholder="Search categories..."
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" tabindex="-1"
                        Class="category-search" Immediate="true"   />
                    </div>
                    <MudNavMenu Class="category-navmenu">
                        @foreach (var category in filteredcategories)
                        {
                            <MudNavLink Class="@($"category-link {(category == SelectedCategory ? "selected" : "")}")"
                                        
                            Ripple="false">
                                <MudButton Class="category-card" Variant="Variant.Text" OnClick="@(() => SelectCategory(category))">
                                    <MudText Typo="Typo.subtitle1" Class="category-text">@category.catName</MudText>
                                </MudButton>
                            </MudNavLink>

                        }
                    </MudNavMenu>
                </div>

                <div class="items-container">
                    <MudGrid>
                        @foreach (var item in filteredSubFillItemlist)
                        {
                            decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                            if(rate>0)
                            {
                                <MudItem xs="12" sm="6" md="4" lg="3" Style="padding-top:0;padding-bottom:5px!important;padding-left:4px!important">
                                    <MudCard Class="item-card" Elevation="6" Hover="true" @onclick="() => AddToOrderBillItem(item)" tabindex="0">
                                        <div class="item-header">
                                            <div class="item-image-container">
                                                <MudImage Src="images/images.jpg" Alt="@item.itemName" Class="item-image" />
                                            </div>
                                            <MudText Typo="Typo.subtitle2" Class="item-price item-header-price">&#8377;@rate.ToString("F2")</MudText>
                                        </div>
                                        <MudCardContent Style="padding:8px 0px 2px 8px">
                                            <MudText Typo="Typo.subtitle2" GutterBottom="false" Class="item-title" Style="">@ToTitleCase(item.itemName)</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </div>
            </div>

            <!-- Footer with status and time -->
            <div class="footer-part">
                <div class="footer-left">
                    <MudChip T="string" Class="status-chip">Open Orders: 3</MudChip>
                    <MudChip T="string" Class="status-chip">Running: 5</MudChip>
                    <MudChip T="string" Class="status-chip">Billed: 10</MudChip>
                    <MudChip T="string" Class="status-chip">Vacant Tables: 8</MudChip>
                </div>
                <div class="footer-right">
                    <MudText Typo="Typo.subtitle2">@DateTime.Now.ToString("hh:mm tt")</MudText>
                </div>
            </div>
        </div>

        <div class="right-panel">
            <MudPaper Class="custom-order-list" Elevation="6">
                <div class="custom-order-header-row">
                    <MudText Typo="Typo.h5" Class="custom-order-header">
                        Ordered Items
                    </MudText>

                    <MudTextField 
                    T="string"
                    @bind-Value="qrCode"
                    Placeholder="Item qr code..."
                    Class="custom-order-qrcode" />
                </div>

                <div id="scrollContainer" class="custom-ordered-items-list">
                    <MudList T="object">
                        @if (OrderedItems == null || !OrderedItems.Any())
                        {
                            <MudText Typo="Typo.body1" Align="Align.Center" Class="custom-empty-order-text">
                                No items ordered yet.
                            </MudText>
                        }
                        else
                        {
                            @foreach (var orderItem in OrderedItems.AsEnumerable().Reverse())
                            {
                                <MudListItem Style="padding: 0;" Class="custom-ordered-list-item">

                                    <MudGrid Style="width: 100%; align-items: stretch;" Spacing="0" Class="ma-0 pa-0">

                                        <!-- Add Button -->
                                        <MudItem xs="1" Class="pa-0" Style="display: flex; align-items: center;">
                                            <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                            Variant="Variant.Text"
                                            OnClick="@(() => AddItem(orderItem))"
                                            Style="height: 100%; width: 36px; min-width: 36px;color: #3eb489;" />
                                        </MudItem>

                                        <!-- Item Name and Quantity -->
                                        <MudItem xs="10" Class="pa-2" Style="display: flex; flex-direction: row; justify-content: space-between; min-width: 0; align-items: center;">
                                            <!-- Left part: name -->
                                            <div Class="custom-order-line1" style="font-weight: 500; word-break: break-word; white-space: normal; flex: 9;">
                                                @ToTitleCase(orderItem.Name)
                                            </div>

                                            <!-- Right part: quantity -->
                                            <div Class="custom-order-line1" style="white-space: nowrap; text-align: right; flex: 1;">
                                                x @orderItem.Quantity
                                            </div>
                                        </MudItem>

                                        <!-- Right-side Controls -->
                                        <MudItem xs="1" Class="pa-0" Style="display: flex; align-items: center; justify-content: center;">
                                            <div style="display: flex; flex-direction: column; gap: 2px;">
                                                <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline"
                                                Color="Color.Error"
                                                Variant="Variant.Text"
                                                OnClick="@(() => DeleteItem(orderItem))" />
                                                <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle"
                                                Style="color: #3eb489;"
                                                Variant="Variant.Text"
                                                OnClick="@(() => MinusItem(orderItem))" />
                                            </div>
                                        </MudItem>

                                    </MudGrid>

                                </MudListItem>


                            }
                        }
                    </MudList>
                </div>
                <div class="custom-order-footer">
                    <MudTextField T="int?"
                                  Label="Diners #"
                                  Variant="Variant.Outlined"
                        Style="width:120px;"
                        Immediate="true"
                        @bind-Value="NumberOfGuests"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Group"
                        />


                <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="HandleSave">
                        <MudIcon Icon="@Icons.Material.Filled.Check" /> Place Order
                    </MudButton>

                </div>

            </MudPaper>
        </div>
    </div>
</MudPaper>

@if (isLoading)
{
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.4); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <MudProgressCircular Color="Color.Primary"   Indeterminate="true" />
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">Saving....</MudText>
        </div>
    </div>
}
@code {
    [Parameter]
    public int? TableId { get; set; }

    private bool isLoading = false;

    public int? NumberOfGuests { get; set; }
    public sealed class SaveBillResponse
    {
        public string? Message { get; init; }
    }

    private BillMasterDTO newbillmaster = new();
    private HotBillItemDetailDTO detail = new();
    private async Task HandleSave()
    {
        BgService.StopBackgroundTasks();
        try
        {
            isLoading = true;
            if (selectedTable == null || !(selectedTable.tableId > 0))
            {
                Snackbar.Add("Table Not Selected", Severity.Error);
            }
            else if (OrderedItems.Any())
            {
                var hotKOTMaster = new HotKOT
                {
                    HotKOTType = 1, // e.g., dine-in
                    HotKOTPrefix = "",
                    HotKOTRefNo = "",

                    HotKOTDate = DateTime.UtcNow.Date, // or convert to local if needed
                    HotKOTTime = DateTime.UtcNow, // time component included

                    BearerID = appState.BearerId,
                    NoOfGuests = NumberOfGuests??0,

                    HotKotAmt = 0m, // will compute from items
                    HotKOTNotes = "Special instructions here",

                    AppMachineID = appState.MachineId, // see below
                    BranchID = appState.BranchId,
                    DiningSpaceID = diningspaceid,
                    EnteredEmpID = appState.LoggedInUserId,
                    CounterID = appState.CounterId,

                    // status fields
                    IsSynced = false,

                    // link table and items
                    Tables = new HotKOTTable
                    {
                        HotTabID = selectedTable.tableId  
                    },
                    Items = OrderedItems.Select(src =>
                    {
                        return new HotKOTItemDetail
                        {
                            ItemID = src.ItemId,
                            BarCode = "",
                            Qty = src.Quantity,
                            UnitID = src.UnitID,
                            DetRate = 0m,
                            DetAmt = 0m,
                            DetDiscPer =0m,
                            DetDiscAmt = 0m,
                            DetGrossAmt = 0m,
                            DetTaxPer = 0m,
                            DetTaxAmt = 0m,
                            DetNetAmt = 0m,
                            HotKotItemNotes = ""
                        };
                    }).ToList()
                };

                // compute total
                hotKOTMaster.HotKotAmt = hotKOTMaster.Items.Sum(i => i.DetNetAmt);

                // save
                var saveResult = await _HotKOTSaveService.SaveHotKOTAsync(hotKOTMaster);
                if (saveResult.IsSuccess)
                {
                    BgService.QueueKOTUploadAsync();

                    Snackbar.Clear();
                    Snackbar.Add("Order Placed Successfully!!.", Severity.Success);
                    OrderedItems = new();
                    NumberOfGuests = null;


                    await Task.Delay(1000);
                    Nav.NavigateTo("/tables");
                }
                else
                {
                    Snackbar.Add("Order Place Error!!. \n"+ saveResult.ErrorMessage , Severity.Error);
                    // Console.WriteLine(saveResult.ErrorMessage);
                }
            }
            else
                Snackbar.Add("Nothing to order", Severity.Error);
        }
        finally
        {
            BgService.StartBackgroundTasks();
            isLoading = false;
        }
    }



    public int selectedDiningSpace { get; set; } = 0;
    decimal TotalAmount => OrderedItems.Sum(x => x.Amount);
    decimal DiscountPercent { get; set; } = 0;
    decimal DiscountAmount => TotalAmount * DiscountPercent / 100;
    decimal SubTotal => TotalAmount - DiscountAmount;
    decimal TaxPercent => 0;
    decimal TaxAmount => (DiscountPercent > 0 ? SubTotal : TotalAmount) * TaxPercent / 100;
    decimal GrandTotal => (DiscountPercent > 0 ? SubTotal : TotalAmount) + TaxAmount;


    private List<Category> categories = new();
    private List<Category> filteredcategories = new();
    private List<Item> Items = new();
    private List<BillItem> BillItems = new();
    private List<MainItem> mainitems = new();
    private List<Unit> filteredunits = new();
    private List<ItemOrder> OrderedItems = new List<ItemOrder>();

    private List<BillItem> filteredMainFillItem = new();
    private List<BillItem> filteredSubFillItem = new();
    private List<BillItem> filteredSubFillItemlist = new();

    private List<VWItemParentChild> parentchildrenitem = new();
    private List<DiningSpaceItemRate> dsitemrate = new();

    private List<DiningSpace> dspace = new();
    private List<BillStation> billstationsss = new();

    public string diningspacename { get; set; }
    public int diningspaceid { get; set; }
    public string countername { get; set; }

    private KOTInitDTO initData = new();


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {


            var result = await PageService.GetInitData();

            if (result.IsSuccess)
            {
                initData = result.Data ?? new KOTInitDTO();
            }
            else
            {
                Console.WriteLine($"Initialisatiion failed: {result.ErrorMessage}");
            }


            dspace = await PosService.GetDiningSpaces();
            billstationsss = await PosService.GetBillStations();

            var firstSpace = dspace.FirstOrDefault();
            var firstbill = billstationsss.FirstOrDefault();

            // if (firstSpace != null)
            //     diningspacename = firstSpace.diningSpaceName ?? "";
            if (firstbill != null)
                countername = firstbill.billStationName ?? "";

            categories = await PosService.GetCategoriesAsync();

            BillItems = await PosService.GetBillItemsAsync();

            dsitemrate = await PosService.GetItemRateAsync();
            parentchildrenitem = await PosService.GetParentChildAsync();


            filteredMainFillItem = BillItems
        .Where(item => item.itemType == 1 || item.itemType == 2)
        .ToList();

            filteredSubFillItem = BillItems
            .Where(item => item.itemType == 1 || item.itemType == 3)
            .ToList();


            filteredSubFillItemlist = filteredSubFillItem;



            var allCategory = new Category { catId = 0, catName = "All" };

            categories.Insert(0, allCategory); // Add to top
            SelectedCategory = allCategory;
            filteredcategories = categories.ToList();

            FilteredItems = Items.ToList();
            Console.WriteLine("loaded!");

            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;


            selectedTable = initData.Tables.FirstOrDefault(t => t.tableId == TableId)??new();
            if (selectedTable != null)
            {
                diningspaceid = initData.TablesDiningSpaces
      .Where(tm => tm.tableId == selectedTable.tableId)
      .Select(tm => tm.diningspaceId)
      .FirstOrDefault();

                selectedDiningSpace = diningspaceid;

                if (diningspaceid > 0)
                {
                    diningspacename = dspace
      .Where(tm => tm.diningSpaceId == diningspaceid)
      .Select(tm => tm.diningSpaceName)
      .FirstOrDefault()??"";
                }

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialisatiion failed: {ex.Message}");
        }
        isLoading = false;
    }

    void ApplyDiscount()
    {
        DiscountPercent = DiscountPercent == 0 ? 10 : 0; // Toggle for example
    }

    void ApplyLoyalty()
    {
        // Not yet implemented
    }

    public string qrCode { get; set; }
    public bool intermediateTime { get; set; } = true;


    private async void onEnteronItemQuantity(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Code == "Enter")
        {


            var matchedItem = filteredMainFillItem
                .FirstOrDefault(i => i.itemId == selectedItem.itemId);
            if (matchedItem != null)
            {
                if (itemQuantity >= 0)
                {
                    var unitId = selectedUnit?.unitId ?? 0;

                    AddToOrderHeader(matchedItem, itemQuantity??0,unitId);


                    itemQuantity = null;
                    await quantityRef.ResetAsync(); // 👈 this clears the UI value

                    selectedItem = null;
                    await productRef.ResetAsync(); // 👈 this clears the UI value

                    selectedUnit = null;
                    await unitRef.ResetAsync(); // 👈 this clears the UI value


                    StateHasChanged();

                    await Task.Delay(10); // Small delay for render cycle

                    await JS.InvokeVoidAsync("eval", "document.body.setAttribute('tabindex', '0'); document.body.focus();");
                    // await productRef.FocusAsync();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("unknown quanity!!.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("no item found!!.", Severity.Error);
            }
        }
    }



    public int? itemQuantity { get; set; }
    private async Task HandleProductSelected(BillItem mainitemselect)
    {
        if (intermediateTime)
        {
            if (selectedItem?.itemId != mainitemselect?.itemId && mainitemselect != null)
            {
                selectedItem = mainitemselect;

                filteredunits = filteredMainFillItem
                    .Where(i => i.itemId == selectedItem.itemId && i.ItemUnits != null)
                    .SelectMany(i => i.ItemUnits!) // Flatten the list
                    .Where(iu => iu.Unit != null) // Avoid null Unit references
                    .Select(iu => iu.Unit)
                    .Distinct()
                    .ToList();

                filteredunits = filteredunits
                                .Where(unit =>
                                {
                                    var child = parentchildrenitem
                                        .FirstOrDefault(x => x.parentItemId == selectedItem.itemId && x.unitId == unit.unitId);

                                    if (child == null)
                                        return false;

                                    var rate = dsitemrate.FirstOrDefault(x =>
                                        x.itemId == child.childItemId &&
                                        x.diningSpaceId == selectedDiningSpace);

                                    return rate != null && rate.itemRate > 0;
                                })
                                .ToList();

                selectedUnit = null;
                StateHasChanged();

                await Task.Delay(100);

                if (!(filteredunits.Any()))
                    await quantityRef.FocusAsync();
                else
                    await unitRef.FocusAsync();
            }
        }
    }


    private async Task HandleTableSelected(Table? tableSelect)
    {
        selectedTable = tableSelect;
        if (selectedTable != null)
        {
            diningspaceid = initData.TablesDiningSpaces
      .Where(tm => tm.tableId == selectedTable.tableId)
      .Select(tm => tm.diningspaceId)
      .FirstOrDefault();

            if (diningspaceid > 0)
            {
                diningspacename = dspace
      .Where(tm => tm.diningSpaceId == diningspaceid)
      .Select(tm => tm.diningSpaceName)
      .FirstOrDefault() ?? "";
            }

        }
        else diningspacename = "";

        await Task.Delay(1);
    }



    private async Task HandleUnitSelected(Unit unitselect)
    {
        if (selectedUnit?.unitId != unitselect?.unitId && unitselect != null)
        {
            selectedUnit = unitselect;
            await Task.Delay(100); // Let autocomplete settle
            await quantityRef.FocusAsync(); // 👈 Move to NEXT field
        }
    }
    private MainItem selectedProduct;
    private BillItem selectedItem;
    private Table selectedTable;



    private Unit selectedUnit;
    private MudAutocomplete<BillItem> productRef;
    private MudAutocomplete<Unit> unitRef;
    private MudTextField<int?> quantityRef;
    private Category SelectedCategory;



    private Task<IEnumerable<Unit>> SearchUnits(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Unit>>(filteredunits);

        var result = (filteredunits ?? new List<Unit>())
            .Where(p => p.unitName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }


    private Task<IEnumerable<BillItem>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<BillItem>>(filteredMainFillItem);

        var result = filteredMainFillItem
            .Where(p => p.itemName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }

    private Task<IEnumerable<Table>> SearchTable(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Table>>(initData.Tables);

        var result = initData.Tables
            .Where(p => p.tableName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }


    private void ClickMe()
    {
        Console.WriteLine("Button clicked!");
    }



    private string _searchText = string.Empty;
    private string _categorySearchText = string.Empty;

    public string _categorySearch
    {
        get => _categorySearchText;
        set
        {
            _categorySearchText = value;
            FilterCategories();
        }
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(_categorySearchText))
        {
            filteredcategories = categories.ToList();
        }
        else
        {
            filteredcategories = categories
                .Where(c => c.catName.Contains(_categorySearchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }




    private void OnSearchChanged(object value)
    {
        _searchText = value.ToString();
        ApplyFilters();
    }

    private void OnCategorySearchChanged(string value)
    {
        _categorySearchText = value;
    }




    private void SelectCategory(Category category)
    {
        SelectedCategory = category;
        ApplyFilters();
    }



    private void ApplyFilters()
    {
        filteredSubFillItemlist = filteredSubFillItem
        .Where(item =>
            (SelectedCategory.catId == 0 || item.CatId == SelectedCategory.catId) &&
            (string.IsNullOrWhiteSpace(_searchText) ||
                item.itemName.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
        )
        .ToList();
    }

   
    private void AddToOrderBillItem(BillItem item)
    {
        var existingOrder = new ItemOrder();
        if (item.itemType == 1)
        {
          existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId);
        }
        else if(item.itemType==3)
        {
            var filtered = parentchildrenitem
                           .Where(x => x.childItemId == item.itemId)
                           .ToList();

            int unitid = filtered.FirstOrDefault()?.unitId ?? 0;
            int parentItemId = filtered.FirstOrDefault()?.parentItemId ?? 0;
            existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == parentItemId);
        }

        if (existingOrder == null)
        {
            if(item.itemType==1)
            {

                decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                OrderedItems.Add(new ItemOrder { ItemId = item.itemId, UnitID = 0, Name = item.itemName, Price = rate, Quantity = 1, Amount = rate });

            }
            else
            {
                var filtered = parentchildrenitem
                           .Where(x => x.childItemId == item.itemId)
                           .ToList();

                int unitid = filtered.FirstOrDefault()?.unitId ?? 0;
                int parentItemId = filtered.FirstOrDefault()?.parentItemId ?? 0;

                decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                OrderedItems.Add(new ItemOrder { ItemId = parentItemId, UnitID = unitid, Name = item.itemName, Price = rate, Quantity = 1, Amount = rate });

            }
            
        }
        else
        {
            existingOrder.Quantity++;
            var itemamount = Math.Round(existingOrder.Quantity * existingOrder.Price, 2);
            existingOrder.Amount = itemamount;
        }

        Snackbar.Clear();
        Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });

    }

    private void AddToOrderHeader(BillItem item,int Qty,int unitid)
    {
        var existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId);
        if (existingOrder == null)
        {

            if (item.itemType == 1)
            {

                var filtereddiningspacerate = dsitemrate
                               .Where(x => x.itemId == item.itemId && x.diningSpaceId == selectedDiningSpace)
                               .ToList();
                decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;

                var itemamount = Math.Round(Qty * mainiitemrate, 2);

                if (Qty > 0)
                {
                    OrderedItems.Add(new ItemOrder { ItemId = item.itemId, Name = item.itemName, Price = mainiitemrate, Quantity = Qty, Amount = itemamount,UnitID=0 });
                    Snackbar.Clear();
                    Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
                }
            }
            else
            {

                var filtered = parentchildrenitem
                               .Where(x => x.parentItemId == item.itemId && x.unitId == unitid)
                               .ToList();


                int childItemId = filtered.FirstOrDefault()?.childItemId ?? 0;
                string childItemName = filtered.FirstOrDefault()?.childItemname ?? "";


                var filtereddiningspacerate = dsitemrate
                               .Where(x => x.itemId == childItemId && x.diningSpaceId == selectedDiningSpace)
                               .ToList();

                decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;

                var itemamount = Math.Round(Qty * mainiitemrate, 2);

                if (Qty > 0)
                {
                    OrderedItems.Add(new ItemOrder { ItemId = item.itemId, Name = childItemName, Price = mainiitemrate, Quantity = Qty, Amount = itemamount ,UnitID=unitid});
                    Snackbar.Clear();
                    Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
                }
            }
        }
        else
        {
            if (Qty > 0)
            {
                existingOrder.Quantity = Qty;
                var itemamount = Math.Round(existingOrder.Quantity * existingOrder.Price, 2);
                existingOrder.Amount = itemamount;
            }
            else
            {
                OrderedItems.Remove(existingOrder);
                Snackbar.Clear();
                Snackbar.Add($"{item.itemName} removed from order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
            }
        }
    }

    
    private void AddItem(ItemOrder addItem)
    {
        addItem.Quantity ++;

        var itemamount = Math.Round(addItem.Quantity * addItem.Price, 2);
        addItem.Amount = itemamount;
    }
    private void MinusItem(ItemOrder minuItem)
    {
        if (minuItem.Quantity != 1)
        {
            minuItem.Quantity--;
            var itemamount = Math.Round(minuItem.Quantity * minuItem.Price, 2);
            minuItem.Amount = itemamount;
        }
        else
            OrderedItems.Remove(minuItem);


    }
    private void DeleteItem(ItemOrder deleteItem)
    {
        OrderedItems.Remove(deleteItem);
    }

    private List<Item> FilteredItems = new();

    private class ItemOrder
    {
        public int ItemId { get; set; }
        public int UnitID { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
    }

    private string ToTitleCase(string input)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }

    async Task ScrollToBottom()
    {
        await Task.Delay(2000); // 2 seconds
        await JS.InvokeVoidAsync("scrollToBottom", "scrollContainer");
    }


   
}

