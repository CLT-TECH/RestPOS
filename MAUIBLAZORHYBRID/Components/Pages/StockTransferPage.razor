@page "/stocktransfer"
@layout Components.Layout.POSLayout
@using MAUIBLAZORHYBRID.Components.Pages.Dialogue
@using MAUIBLAZORHYBRID.Data.DTO
@using MAUIBLAZORHYBRID.Data.Data
@using MAUIBLAZORHYBRID.Helpers
@using MAUIBLAZORHYBRID.Services.Sync
@using MAUIBLAZORHYBRID.Services.Upload
@using System.Diagnostics
@using SharpHook.Data

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject AppState appState
@inject StockTransferService pageService
@inject IStockTransferSaveService saveService
@inject ISyncService SyncService
@inject IDataUploadService UploadService
@inject BackgroundDataService BgService
@inject StockReportService StockService


@inject IJSRuntime JSRuntime
@inject IKeyboardListenerService KeyboardListener
@implements IDisposable
@inject IDialogService DialogService


@if (!_isAuthenticated)
{

    <div class="d-flex justify-center align-center" style="height: 100vh;background-color:#eaf6f4">
        <MudPaper Class="pa-6" Elevation="8" Style="width: 350px; text-align: center; border-radius: 16px;">
            <MudText Typo="Typo.h5" Class="mb-4" Color="Color.Primary">
                🔒 Manager Access Required
            </MudText>

            <MudTextField @bind-Value="_enteredPassword"
                          Label="Enter Password"
                          InputType="InputType.Password"
                          Variant="Variant.Text"
                          @ref="passwordRef"
                          OnKeyUp="HandleKeyUpPassword"
                          Class="mb-4"/>


            <MudButton OnClick="VerifyAccessAsync"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       FullWidth="true"
                       Size="Size.Medium">
                Unlock
            </MudButton>

            @if (_errorVisible)
            {
                <MudAlert Severity="Severity.Error"
                Class="mt-4 text-center">
                Invalid Password. Please try again.
            </MudAlert>
            }
        </MudPaper>
    </div>
}
else
{

<MudPaper Class="pos-screen" Style="overflow:scroll">
    <div class="">
        <div class="center-panel-new">

            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                <!-- Left: Page Title -->
                <MudText Typo="Typo.h5" Class="mb-4">
                    <span style="color:saddlebrown">@appState.BranchName.ToUpper() -</span>
                    - Stock Transfer
                </MudText>







                <!-- Center: Branch Name -->
                <!-- Right: View List Button -->
                @if (listSaved)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => listSaved = false)">
                        <MudIcon Icon="@Icons.Material.Filled.Close" Class="me-1" />
                        List
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadSavedList">
                        <MudIcon Icon="@Icons.Material.Filled.List" Class="me-1" />
                        List
                    </MudButton>
                }

            </MudStack>

            <!-- Right: View List Button -->
            @if (listSaved)
            {
                <MudGrid>
                    <MudItem xs="12">
                        <MudTable Dense="true" Items="StockTransferList" FixedHeader="true" Height="70vh">
                            <HeaderContent>
                                <MudTh Class="pa-1">SL #</MudTh>
                                <MudTh Class="pa-1">Date</MudTh>
                                <MudTh Style="width:60%">To Counter </MudTh>
                                <MudTh Class="pa-1"></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.StkTrSlNo</MudTd>
                                <MudTd>@context.TransferDate.ToShortDateString()</MudTd>
                                <MudTd>
                                    @(initData?.Counters?.FirstOrDefault(c => c.billStationId == context.ToCounterId)?.billStationName ?? string.Empty)
                                </MudTd>
                                <MudTd Class="pa-1">
                                    <MudIconButton tabindex="-1" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Info" OnClick="() => ViewSavedDetails(context)" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <div class="">
                    <MudGrid>

                       

                        @if(returnToGodown)
                        {
                            <MudItem xs="8">
                                <MudSelect T="int?" Label="To Godown" OnKeyUp="OnKeyDownHandler" @bind-Value="ToGodownId" @ref="godownRef">
                                    @foreach (var obj in initData.Godowns)
                                    {
                                        <MudSelectItem Value="@obj?.GodownId">@obj?.GodownName</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                        }
                        else
                        {
                            if(appState.GodownId>0)
                            {
                                <MudItem xs="8">
                                    <MudSelect T="int?" Label="To Counter" OnKeyUp="OnKeyDownHandler" @bind-Value="ToCounterId" @ref="counterRef">
                                        @foreach (var counter in initData.Counters)
                                        {
                                            <MudSelectItem Value="@counter?.billStationId">@counter.billStationName</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }
                           
                        }

                        @if(appState.GodownId>0)
                        {
                            <MudItem xs="4">
                                <MudCheckBox Value="returnToGodown" T="bool" Label="Return to Godown" ValueChanged="OnReturnToGodownChanged" />
                            </MudItem>
                        }
                      

                    </MudGrid>

                    @if(modId==0)
                    {
                        <MudGrid Class="mt-1">
                        <MudItem xs="9">
                            <MudAutocomplete T="BarItem" Label="Item" Value="selectedItem" ValueChanged="HandleProductSelected"
                                             SearchFunc="SearchProducts"
                                             @ref="productRef"
                                             ToStringFunc="(p) => p?.BarItemName" Dense Immediate @onclose="HandleProductBlur" />
                        </MudItem>
                        @* <MudItem xs="3">
                        <MudAutocomplete T="Unit" Label="Unit" Value="selectedUnit" ValueChanged="HandleUnitSelected"
                                         @ref="unitRef" SearchFunc="SearchUnits"
                                         ToStringFunc="(p) => p?.unitName" Dense Immediate />
                    </MudItem> *@
                        <MudItem xs="2">
                            <MudTextField OnKeyUp="onEnteronItemQuantity" @ref="quantityRef" T="decimal?" Label="Qty" @bind-Value="itemQuantity" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="1" Style="padding-bottom:0;margin-top:auto">
                            <MudIconButton OnClick="AddItemToTransfer" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small"></MudIconButton>

                        </MudItem>
                    </MudGrid>
                    }
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTable Dense="true" Items="TransferItems" FixedHeader="true" Height="50vh">
                                <HeaderContent>
                                    <MudTh Style="width:10%">SL#</MudTh>
                                    <MudTh Style="width:75%">Item</MudTh>
                                    <MudTh>Qty</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@(TransferItems.IndexOf(context) + 1)</MudTd>
                                    <MudTd>@context.ItemName</MudTd>
                                    <MudTd>@context.TR_Qty</MudTd>
                                    @if (modId == 0)
                                    {
                                        <MudTd>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveItem(context)" />
                                        </MudTd>
                                    }
                                </RowTemplate>
                            </MudTable>


                        </MudItem>
                        <MudItem xs="6">
                            <div style="margin-top:auto; padding-top:16px;">
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="HandleReset" FullWidth>
                                    <MudIcon Icon="@Icons.Material.Filled.Undo" /> Reset
                                </MudButton>
                            </div>
                        </MudItem>

                        <MudItem xs="6">
                            @if (modId == 0)
                            {
                                <div style="margin-top:auto; padding-top:16px;">
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="HandleStockTransferSave" FullWidth>
                                        <MudIcon Icon="@Icons.Material.Filled.Save" /> Save Transfer
                                    </MudButton>
                                </div>
                            }
                            else
                            {
                                <div style="margin-top:auto; padding-top:16px;">
                                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="OpenCancelDialog" FullWidth>
                                        <MudIcon Icon="@Icons.Material.Filled.Save" /> Cancel Tranfer
                                    </MudButton>
                                </div>
                            }
                        </MudItem>
                    </MudGrid>

                </div>
            }


        </div>
    </div>
</MudPaper>


@if (isLoading)
{
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.4); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">Loading....</MudText>
        </div>
    </div>
}


}
@code {

    private bool isLoading = false;

    private bool returnToGodown = false;

    public void OnReturnToGodownChanged(bool value)
    {
        returnToGodown = value;
        if (returnToGodown)
        {
            if(appState.GodownId>0)
            {
                ToGodownId = appState.GodownId;
            }
            else if (appState.defaultBranchGodown > 0)
            {
                ToGodownId = appState.defaultBranchGodown;
            }

        }
        else
        {
            ToCounterId = appState.CounterId;
        }
    }

    public int? FromGodownId { get; set; } 
    public int? ToGodownId { get; set; }  
    public int? FromCounterId { get; set; }
    public int? ToCounterId { get; set; } 


    private BarItem? selectedItem { get; set; }
    // private Unit? selectedUnit { get; set; }
    private int? selectedUnit { get; set; }

    private decimal? itemQuantity { get; set; }

    List<BillItem> Items = new();
    // private List<BillItem> filteredMainFillItem = new();

    List<BarItem> filteredMainFillItem = new();

    StockTransferInitDTO initData = new();

    List<Unit> Units = new();
    List<Godown> Godowns = new();
    List<BillStation> Counters = new();

    List<StockTransferItemDTO> TransferItems = new();
    private List<PendingStockDTO> pendingTransfersOutCancelled = new();
    private List<PendingStockDTO> pendingTransfersOut = new();

    private List<PendingStockDTO> pendingInward = new();
    private List<PendingStockDTO> pendingBills = new();


    private async Task LoadItemStock()
    {
        try
        {



            var result = await pageService.GetInitData();
            initData = result.Data ?? new();
            Counters = initData.Counters;
            var inwardResult = await StockService.GetPendingInwardsAsync();
            pendingInward = inwardResult.IsSuccess ? inwardResult.Data ?? new() : new();

            var trandferOutCancelled = await StockService.GetCancelledPendingSyncAsync();
            pendingTransfersOutCancelled = trandferOutCancelled.IsSuccess ? trandferOutCancelled.Data ?? new() : new();

            var trandferOut = await StockService.GetPendingTransfersAsync();
            pendingTransfersOut = trandferOut.IsSuccess ? trandferOut.Data ?? new() : new();

            var billsResult = await StockService.GetPendingBillsAsync();
            pendingBills = billsResult.IsSuccess ? billsResult.Data ?? new() : new();


            filteredMainFillItem = initData.barItems
                     .Where(item => item.MainBarItem == 0)
                     .ToList();

            filteredMainFillItem.ForEach(item =>
    {
        if (item == null) return; // skip null items

        // Defensive check — ensure BarItemGodownStocks list exists
        item.BarItemGodownStocks ??= new List<BarItemStockGodown>();

        // Calculate total inward and transfer quantities safely
        decimal inwardQty = pendingInward
        .Where(p => p != null && p.MainBarItemId == item.BarItemId)
        .Sum(p => p.Quantity);

        decimal transferQty = pendingTransfersOut
        .Where(p => p != null && p.MainBarItemId == item.BarItemId)
        .Sum(p => p.Quantity);

        decimal transferQtyCancelled = pendingTransfersOutCancelled
            .Where(p => p != null && p.MainBarItemId == item.BarItemId)
            .Sum(p => p.Quantity);


        decimal BiillQty = pendingBills
    .Where(p => p != null && p.MainBarItemId == item.BarItemId)
    .Sum(p => p.Quantity);



        decimal netChange = inwardQty - transferQty + transferQtyCancelled - BiillQty;

        // If no change, skip to next
        if (netChange == 0) return;

        // Get or create godown record
        var godown = item.BarItemGodownStocks.FirstOrDefault(g => g.GodownId == appState.GodownId);
        if (godown != null)
        {
            godown.Stock += netChange;
        }
        else
        {
            item.BarItemGodownStocks.Add(new BarItemStockGodown
       {
           BarItemId = item.BarItemId,
           GodownId = appState.GodownId,
           Stock = netChange
       });

        }

    });
        }
        catch
        {

        }
    }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {







            if (await CheckNetworkConnection())
            {
                var resultkot = await UploadService.UploadPendingKOTsAsync();
                var result = await UploadService.UploadPendingDataAsync();

                var resultstock = await SyncService.
                SyncBarItemGodownStock();


            }

        }
        catch
        {

        }

        try
        {
            await LoadItemStock();
            if (!(appState.GodownId > 0))
            {
                OnReturnToGodownChanged(true);
                focusStage=1;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialisatiion failed: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private string DetectCombo(Services.Interfaces.KeyboardEventData evt)
    {
        if (evt.EventType != EventType.KeyPressed) return "";

        return evt.KeyCode switch
        {
            KeyCode.VcF1 => "F1",
            KeyCode.VcF2 => "F2",
            KeyCode.VcF3 => "F3",
            KeyCode.VcF4 => "F4",
            KeyCode.VcF5 => "F5",
            KeyCode.VcF6 => "F6",
            KeyCode.VcF7 => "F7",
            KeyCode.VcF8 => "F8",
            KeyCode.VcF9 => "F9",
            KeyCode.VcF10 => "F10",
            KeyCode.VcF11 => "F11",
            KeyCode.VcF12 => "F12",
            KeyCode.VcS when evt.IsCtrlPressed => "Ctrl + S",
            KeyCode.VcEnter when evt.IsCtrlPressed => "Ctrl + Enter",
            KeyCode.VcDelete when evt.IsCtrlPressed => "Ctrl + Delete",
            KeyCode.VcTab when evt.IsCtrlPressed => "TabOrderAndItem",
            KeyCode.VcEquals => "+",
            KeyCode.VcMinus => "-",
            _ => ""
        };
    }

    private string lastKey = "";
    private string combo = "";
    private string barcode = "";
    private List<Services.Interfaces.KeyboardEventData> keyEvents = new();
    private IDisposable? _keyEventSubscription;


    private bool _keyboardListeningStarted;
    private async Task InitializeKeyboardListener()
    {
        if (_keyboardListeningStarted)
            return;
        _keyboardListeningStarted = true;
        KeyboardListener.StartListening();

        _keyEventSubscription = KeyboardListener.KeyEvents.Subscribe(async evt =>
        {
            lastKey = evt.KeyName;
            keyEvents.Insert(0, evt);
            combo = DetectCombo(evt);

            switch (combo)
            {
                case "Ctrl + S":
                    Debug.WriteLine("Saved");
                    break;
                case "F1":
                    await HandleStockTransferSave();
                    await InvokeAsync(StateHasChanged);
                    break;
                case "F11":
                    await HandleReset();
                    await InvokeAsync(StateHasChanged);
                    break;
                case "F4":
                    await HandleF4Key();
                    break;
                default:
                    Debug.WriteLine("Everything else");
                    break;
            }

            // Call StateHasChanged if needed for UI updates
        });

        await Task.Delay(50);


    }


    public int enterflag { get; set; }
    private async void onEnteronItemQuantity(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Code == "Enter")
        {
            enterflag = 1;
            AddItemToTransfer();
            selectedItem = null;
            selectedUnit = null;
            itemQuantity = null;

            await quantityRef.ResetAsync(); // 👈 this clears the UI value
            await productRef.ResetAsync(); // 👈 this clears the UI value
            // await unitRef.ResetAsync();

            enterflag = 0;
            focusStage = 1;

        }
    }



    private async void AddItemToTransfer()
    {
        if (selectedItem != null  && itemQuantity > 0)
        {
            var existing = TransferItems.FirstOrDefault(x => x.Main_Bar_Item_ID == selectedItem.MainBarItemID && x.Unit_ID == selectedItem.BarItemBaseUnitId);
            if (existing != null)
            {
                TransferItems.Remove(existing);
            }

            var totalStock = initData.barItems
                         .Where(b => b.BarItemId == selectedItem.BarItemId)
                         .SelectMany(b => b.BarItemGodownStocks)
                         .Sum(s => (int?)s.Stock) ?? 0;






            if (itemQuantity > totalStock)
            {
                Snackbar.Add($"Only {totalStock} available .", Severity.Error);
                TransferItems.Add(new StockTransferItemDTO
                    {
                        Main_Bar_Item_ID = selectedItem.MainBarItemID,
                        Unit_ID = selectedItem.BarItemBaseUnitId,
                        TR_Qty = totalStock,
                        ItemName = selectedItem.BarItemName
                    });
            }
            else if (totalStock==0)
            {
                Snackbar.Add($"No Stock available .", Severity.Error);

            }
            else
            {

                TransferItems.Add(new StockTransferItemDTO
                    {
                        Main_Bar_Item_ID = selectedItem.MainBarItemID,
                        Unit_ID = selectedItem.BarItemBaseUnitId,
                        TR_Qty = itemQuantity ?? 0,
                        ItemName = selectedItem.BarItemName
                    });
            }


            if (enterflag == 0)
            {
                selectedItem = null;
                selectedUnit = null;
                itemQuantity = null;


                focusStage = 1;

            }

        }
    }

    void RemoveItem(StockTransferItemDTO item)
    {
        TransferItems.Remove(item);
    }

    private Task<IEnumerable<BarItem>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<BarItem>>(filteredMainFillItem);

        var result = filteredMainFillItem
            .Where(p => p.BarItemName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }
    private List<Unit> filteredunits = new();
    private MudAutocomplete<Unit> unitRef;
    private MudTextField<decimal?> quantityRef;
    private MudTextField<string> cancelReasonRef;
    private MudAutocomplete<BarItem> productRef;
    private MudSelect<int?> counterRef;
    private MudSelect<int?> godownRef;

    private void HandleProductBlur()
    {
        focusStage = 2;
    }

    private async Task HandleProductSelected(BarItem mainitemselect)
    {
        if (selectedItem?.BarItemId != mainitemselect?.BarItemId && mainitemselect != null)
        {
            selectedItem = mainitemselect;

            selectedUnit = mainitemselect.BarItemBaseUnitId;




            // filteredunits = filteredMainFillItem
            //     .Where(i => i.itemId == selectedItem.itemId && i.ItemUnits != null)
            //     .SelectMany(i => i.ItemUnits!) // Flatten the list
            //     .Where(iu => iu.Unit != null) // Avoid null Unit references
            //     .Select(iu => iu.Unit)
            //     .Distinct()
            //     .ToList();



            selectedUnit = null;

            focusStage = 2;
        }
    }



    private async Task HandleUnitSelected(Unit unitselect)
    {
        // if (selectedUnit?.unitId != unitselect?.unitId && unitselect != null)
        // {
        //     selectedUnit = unitselect;
        //     await Task.Delay(100); // Let autocomplete settle

        //     await quantityRef.FocusAsync();
        // }
    }

    private Task<IEnumerable<Unit>> SearchUnits(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Unit>>(filteredunits);

        var result = (filteredunits ?? new List<Unit>())
            .Where(p => p.unitName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }

    int focusStage = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (passwordRef!=null)
                await passwordRef.FocusAsync();



        }
        else
        {
            if(focusStage==99)
            {
                if (returnToGodown)
                {
                    await productRef.FocusAsync();
                }
                else
                {
                    if (counterRef != null)
                    {
                        await counterRef.FocusAsync();
                        await counterRef.OpenMenu();
                    }

                }
                focusStage = 0;

                await InitializeKeyboardListener();
                await InvokeAsync(StateHasChanged);

            }
            else if (focusStage == 1)
            {
                itemQuantity = null;
                await productRef.FocusAsync();
            }
            else if (focusStage == 2)
            {
                if (selectedItem != null)
                {
                    await Task.Delay(100);
                    await quantityRef.FocusAsync();
                }
            }
            else if (focusStage == 10)
            {
                await productRef.CloseMenuAsync();
                await Task.Delay(100);

                if(returnToGodown)
                {
                    await godownRef.FocusAsync();
                    await godownRef.OpenMenu();
                }
                else
                {
                    await counterRef.FocusAsync();
                    await counterRef.OpenMenu();
                }

            }
            else if (focusStage == 11)
            {
                await productRef.CloseMenuAsync();
                await Task.Delay(50);

                if (returnToGodown)
                {
                    await godownRef.CloseMenu();
                }
                else
                {
                    await counterRef.CloseMenu();
                }
                await Task.Delay(50);
            }
            else if(focusStage==12)
            {
                if (_showCancelDialog && cancelReasonRef != null)
                {
                    await cancelReasonRef.FocusAsync();
                }
            }
            focusStage = 0;

        }
    }

    async Task HandleReset()
    {

        if (appState.GodownId > 0)
        {
            returnToGodown = false;
            ToGodownId = null;
            ToCounterId = appState.CounterId;
        }

        listSaved=false;
        modId=0;
        TransferItemDetails= new();
        StockTransferList = new();

        selectedItem = null;
        itemQuantity = null;
        TransferItems.Clear();

        if (returnToGodown)
            focusStage = 1;
        else
            focusStage = 10;

        await InvokeAsync(StateHasChanged);
    }

    async Task HandleStockTransferSave()
    {
        if (modId > 0)
        {
            Snackbar.Add("This Stock Inward Cannot Saved again.", Severity.Error);
            return;

        }

        BgService.StopBackgroundTasks();
        if (returnToGodown && (ToGodownId == null || ToGodownId <= 0))
        {
            Snackbar.Add("Please select a valid destination godown.", Severity.Error);
            return;
        }
        else if (!returnToGodown && (ToCounterId == null || ToCounterId <= 0))
        {
            Snackbar.Add("Please select a valid destination bill station.", Severity.Error);
            return;
        }

        int _fromGodownID = returnToGodown ? 0 : appState.GodownId;
        int _fromCOunterID = returnToGodown ? appState.CounterId : 0;


        int _fromType = returnToGodown ? 2 : 1;
        int _toType = returnToGodown ? 1 : 2;

        var save = new StockTransfer
        {
            Prefix = "",
            RefNo = "",
            TransferDate = DateTime.UtcNow,
            TransferTime = DateTime.UtcNow,
            FromType = _fromType,
            ToType = _toType,
            BranchId = appState.BranchId,
            EmployeeId = appState.LoggedInUserId,
            Notes = "",
            FromGodownId = _fromGodownID,
            FromCounterId = _fromCOunterID,
            ToGodownId = ToGodownId??0,
            ToCounterId = ToCounterId??0,
            StockTransferDetails = TransferItems.Select(x => new StockTransferItem
            {
                MainBarItemId = x.Main_Bar_Item_ID,
                UnitId = x.Unit_ID,
                Quantity = x.TR_Qty,
                ItemName = x.ItemName,
                Notes =  ""
            }).ToList()
        };



        if (TransferItems.Any())
        {
            try
            {
                isLoading = true;

                var saveResult = await saveService.SaveStockTransferAsync(save);
                if (saveResult.IsSuccess)
                {

                    if (await CheckNetworkConnection())
                    {
                        UploadService.UploadPendingStockTransfersAsync();
                        SyncService.SyncBarItemGodownStock();
                        SyncService.SyncBarItemCounterStock();
                    }

                    Snackbar.Clear();
                    Snackbar.Add("Stock Tranfer Saved Successfully!!.", Severity.Success);
                    TransferItems = new();

                    await LoadItemStock();
                }
                else
                {
                    Snackbar.Add("Order Place Error!!. \n" + saveResult.ErrorMessage, Severity.Error);
                    // Console.WriteLine(saveResult.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Order Place Error!!. \n" + ex.Message, Severity.Error);

            }
            finally
            {
                isLoading = false;
            }
        }
        else
        {
            Snackbar.Add("Nothing to order", Severity.Error);
        }

        BgService.StartBackgroundTasks();

    }

    public class StockTransferItemDTO
    {
        public int Main_Bar_Item_ID { get; set; }
        public int Unit_ID { get; set; }
        public decimal TR_Qty { get; set; }
        public string? ItemName { get; set; }
    }

    public class StockTransferDTO
    {
        public int Stk_Tr_SlNo { get; set; }
        public string Stk_Tr_Prefix { get; set; }
        public string Stk_Tr_RefNo { get; set; }
        public DateTime Stk_Tr_Date { get; set; }
        public DateTime Stk_Tr_Time { get; set; }
        public int Stock_From_Type { get; set; }
        public int Stock_To_Type { get; set; }
        public int Entry_Branch_ID { get; set; }
        public int Entry_Emp_ID { get; set; }
        public string Stk_Tr_Notes { get; set; }
        public int From_Godown_ID { get; set; }
        public int From_Counter_ID { get; set; }
        public int To_Godown_ID { get; set; }
        public int To_Counter_ID { get; set; }
        public List<StockTransferItemDTO> Items { get; set; } = new();
    }

    public class Godown { public int Id { get; set; } public string Name { get; set; } }
    public class Counter { public int Id { get; set; } public string Name { get; set; } }

    private async Task<bool> CheckNetworkConnection()
    {
        try
        {
            // Using JavaScript interop to check navigator.onLine
            return await JSRuntime.InvokeAsync<bool>("eval", "navigator.onLine");
        }
        catch (Exception ex)
        {
            // Fallback - assume online if JS interop fails
            return true;
        }
    }

    bool infocus = false;
    private async Task HandleF4Key()
    {

    }

    private void OnKeyDownHandler(KeyboardEventArgs keyboardArgs)
    {
        if (keyboardArgs.Key == "Enter" || keyboardArgs.Code == "Enter")
        {
            focusStage = 1;
        }
    }

    public void Dispose()
    {

        KeyboardListener.StopListening();
        _keyEventSubscription?.Dispose();
    }

    public bool listSaved { get; set; }


    List<StockTransfer> StockTransferList = new();


    private async Task LoadSavedList()
    {
        await HandleReset();
        StockTransferList = new();
        listSaved = !listSaved;

        var result = await pageService.GetStockTransferMastersAsync();
        if (result.IsSuccess)
        {
            StockTransferList = result.Data ?? new();
        }
        else
        {
            Console.WriteLine($"Initialisatiion failed: {result.ErrorMessage}");

            Snackbar.Add("Error Fetchin", Severity.Error);
        }

    }
    public int modId { get; set; }
    List<StockTransferItem> TransferItemDetails = new();
    private async Task ViewSavedDetails(StockTransfer stockTransfer)
    {
        TransferItemDetails = new();
        var result = await pageService.GetStockTransferDetailsById(stockTransfer.Id);
        if (result.IsSuccess)
        {
            TransferItemDetails = result.Data ?? new();

            listSaved = false;

            modId = stockTransfer.Id;
            ToCounterId = stockTransfer.ToCounterId;

            TransferItems.AddRange(TransferItemDetails.Select(d => new StockTransferItemDTO
            {
                Main_Bar_Item_ID = 0,
                Unit_ID = 0,
                TR_Qty = d.Quantity,
                ItemName = d.ItemName
            }));

            focusStage = 11;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Initialisatiion failed: {result.ErrorMessage}");

            Snackbar.Add("Error Fetchin", Severity.Error);
        }
    }

    private bool _showCancelDialog = false;
    private string _cancelReason = string.Empty;
    private StockTransfer? _selectedTransfer;

    private async Task OpenCancelDialog()
    {
        _selectedTransfer = StockTransferList.FirstOrDefault(t => t.Id == modId);

        if (_selectedTransfer == null)
        {
            Snackbar.Add("No transfer selected.", Severity.Error);
            return;
        }

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<CancelTransferDialog>("Cancel Transfer", options);

        var resultdialog =  await dialog.Result;

        if (resultdialog.Canceled) return;

        var _cancelReason = resultdialog?.Data?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(_cancelReason))
        {
            Snackbar.Add("Please enter a cancellation reason.", Severity.Warning);
            focusStage = 12;
            return;
        }
        var cancelRecord = new StockTransferCancel
        {
            StockTransferId = _selectedTransfer.Id,
            CancelReason = _cancelReason,
            CancelledByEmpId = 1, // TODO: replace with logged-in employee ID
            CancelDate = DateTime.UtcNow.Date,
            CancelTime = DateTime.UtcNow,
            IsSynced = false
        };
        try
        {
            var result = await pageService.SaveStockTransferCancelAsync(cancelRecord);

            if (result.IsSuccess)
            {
                await InvokeAsync(StateHasChanged);

                await Task.Delay(50);

                Snackbar.Add("Transfer cancelled successfully.", Severity.Success);
                _showCancelDialog = false;

                await HandleReset();

                var transfer = StockTransferList.FirstOrDefault(t => t.Id == modId);
                if (transfer != null)
                {
                    StockTransferList.Remove(transfer);
                }
                modId = 0;
                listSaved = true;
                _selectedTransfer = null;

                if(await CheckNetworkConnection())
                {
                    if (await UploadService.HasPendingStockTransferCancelAsync())
                    {
                        _= UploadService.UploadPendingStockTranferCancelsAsync();

                    }
                }

            }
            else
            {
                Snackbar.Add(result.ErrorMessage ?? "Error", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error cancelling transfer: {ex.Message}", Severity.Error);
        }
    }

    private MudTextField<string> passwordRef;
    private string _enteredPassword = "";
    private bool _isAuthenticated = false;
    private bool _errorVisible = false;

    private async Task VerifyAccessAsync()
    {
        bool isValid = await PasswordManager.VerifyPasswordAsync(_enteredPassword);

        if (isValid)
        {
            _isAuthenticated = true;
            _errorVisible = false;
            focusStage=99;
            StateHasChanged();
        }
        else
        {
            _errorVisible = true;
        }

        _enteredPassword = "";
    }
    private async Task HandleKeyUpPassword(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await VerifyAccessAsync();
        }

        _errorVisible = false;

    }



}
