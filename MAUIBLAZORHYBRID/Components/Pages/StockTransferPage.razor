@page "/stocktransfer"
@layout Components.Layout.POSLayout
@using MAUIBLAZORHYBRID.Data.DTO
@using MAUIBLAZORHYBRID.Data.Data
@using MAUIBLAZORHYBRID.Services.Sync
@using MAUIBLAZORHYBRID.Services.Upload

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject AppState appState
@inject StockTransferService pageService
@inject IStockTransferSaveService saveService
@inject ISyncService SyncService
@inject IDataUploadService UploadService
@inject BackgroundDataService BgService


<MudPaper Class="pos-screen">
    <div class="">
        <div class="center-panel">
            <div class="">
                <MudGrid>
                  @*   <MudItem xs="6">
                        <MudSelect T="int" Label="From Type" @bind-Value="FromType" Dense Immediate>
                            <MudSelectItem Value="1" Disabled>Godown</MudSelectItem>
                            <MudSelectItem Value="2">Counter</MudSelectItem>
                        </MudSelect>
                    </MudItem> *@
@*                     <MudItem xs="3">
                        <MudSelect T="int" Label="To Type" @bind-Value="ToType" Dense Immediate>
                            <MudSelectItem Value="1" Disabled>Godown</MudSelectItem>
                            <MudSelectItem Value="2">Counter</MudSelectItem>
                        </MudSelect>
                    </MudItem> *@

                  @*   @if (FromType == 1)
                    {
                        <MudItem xs="6">
                            <MudSelect T="int?" Label="From Godown" @bind-Value="FromGodownId">
                                @foreach (var godown in Godowns)
                                {
                                    <MudSelectItem Value="@godown.Id">@godown.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                    else if (FromType == 2)
                    {
                        <MudItem xs="6">
                            <MudSelect T="int?" Label="From Counter" @bind-Value="FromCounterId">
                                @foreach (var counter in initData.Counters)
                                {
                                    <MudSelectItem Value="@counter?.billStationId">@counter.billStationName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    } *@

                  @*   @if (ToType == 1)
                    {
                        <MudItem xs="8">
                            <MudSelect T="int?" Label="To Godown" @bind-Value="ToGodownId">
                                @foreach (var godown in Godowns)
                                {
                                    <MudSelectItem Value="@godown.Id">@godown.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                    else if (ToType == 2)
                    {
                        <MudItem xs="8">
                            <MudSelect T="int?" Label="To Counter" @bind-Value="ToCounterId">
                                @foreach (var counter in initData.Counters.Where(c => c?.billStationId != appState.CounterId))
                                {
                                    <MudSelectItem Value="@counter?.billStationId">@counter.billStationName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    } *@

                    <MudItem xs="8">
                        <MudSelect T="int?" Label="To Counter" @bind-Value="ToCounterId">
                            @foreach (var counter in initData.Counters)
                            {
                                <MudSelectItem Value="@counter?.billStationId">@counter.billStationName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudGrid Class="mt-4">
                    <MudItem xs="9">
                        <MudAutocomplete T="BarItem" Label="Item" Value="selectedItem" ValueChanged="HandleProductSelected"
                                         SearchFunc="SearchProducts"
                                         @ref="productRef"
                                         ToStringFunc="(p) => p?.BarItemName" Dense Immediate /> 
                    </MudItem>
                    @* <MudItem xs="3">
                        <MudAutocomplete T="Unit" Label="Unit" Value="selectedUnit" ValueChanged="HandleUnitSelected"
                                         @ref="unitRef" SearchFunc="SearchUnits"
                                         ToStringFunc="(p) => p?.unitName" Dense Immediate />
                    </MudItem> *@
                    <MudItem xs="2">
                        <MudTextField OnKeyUp="onEnteronItemQuantity" @ref="quantityRef" T="decimal?" Label="Qty" @bind-Value="itemQuantity" Dense />
                    </MudItem>
                    <MudItem xs="1">
                        <MudIconButton OnClick="AddItemToTransfer" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small"></MudIconButton>
                        
                    </MudItem>
                </MudGrid>

                <MudGrid Class="mt-4">
                    <MudItem xs="12" >
                        <MudTable Dense="true" Items="TransferItems"  FixedHeader="true" Height="60vh">
                                <HeaderContent>
                                    <MudTh Style="width:10%">SL#</MudTh>
                                <MudTh Style="width:75%">Item</MudTh>
                                <MudTh  >Qty</MudTh>
                                <MudTh  ></MudTh>
                               </HeaderContent>
                               <RowTemplate>
                                        <MudTd>@(TransferItems.IndexOf(context)+1)</MudTd>
                                        <MudTd>@context.ItemName</MudTd>
                                        <MudTd>@context.TR_Qty</MudTd>
                                        <MudTd>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveItem(context)" />
                                        </MudTd>
                               </RowTemplate>
                           </MudTable>


                    </MudItem>
                    <MudItem xs="6">
                        <div style="margin-top:auto; padding-top:16px;">
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="HandleReset" FullWidth>
                                <MudIcon Icon="@Icons.Material.Filled.Undo" /> Reset
                            </MudButton>
                        </div>
                    </MudItem>

                    <MudItem xs="6">
                        <div style="margin-top:auto; padding-top:16px;">
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="HandleStockTransferSave" FullWidth>
                                <MudIcon Icon="@Icons.Material.Filled.Save" /> Save Transfer
                            </MudButton>
                        </div>
                    </MudItem>
                </MudGrid>

            </div>
        </div>
    </div>
</MudPaper>

@code {
    public int FromType { get; set; } = 1;
    public int ToType { get; set; } = 2;
    private bool isLoading = false;



    public int? FromGodownId { get; set; } 
    public int? ToGodownId { get; set; }  
    public int? FromCounterId { get; set; }
    public int? ToCounterId { get; set; } 


    private BarItem? selectedItem { get; set; }
    // private Unit? selectedUnit { get; set; }
    private int? selectedUnit { get; set; }

    private decimal? itemQuantity { get; set; }

    List<BillItem> Items = new();
    // private List<BillItem> filteredMainFillItem = new();

    List<BarItem> filteredMainFillItem = new();

    StockTransferInitDTO initData = new();

    List<Unit> Units = new();
    List<Godown> Godowns = new();
    List<BillStation> Counters = new();

    List<StockTransferItemDTO> TransferItems = new();

    protected override async Task OnInitializedAsync()
    {

        try
        {

            var resultkot = await UploadService.UploadPendingKOTsAsync();
            var result = await UploadService.UploadPendingDataAsync();

            var resultstock = await SyncService.
            SyncBarItemGodownStock();

        }
        catch { }

        isLoading = true;
        try
        {
            var result = await pageService.GetInitData();
            if (result.IsSuccess)
            {
                initData = result.Data ?? new ();
                Counters = initData.Counters;

                filteredMainFillItem = initData.barItems
                   .Where(item => item.MainBarItem == 0)
                   .ToList();
            }
            else
            {
                Console.WriteLine($"Initialisatiion failed: {result.ErrorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialisatiion failed: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public int enterflag { get; set; }
    private async void onEnteronItemQuantity(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Code == "Enter")
        {
            enterflag = 1;
            AddItemToTransfer();
            selectedItem = null;
            selectedUnit = null;
            itemQuantity = null;

            await quantityRef.ResetAsync(); // 👈 this clears the UI value
            await productRef.ResetAsync(); // 👈 this clears the UI value
            // await unitRef.ResetAsync();

            await Task.Delay(300);

            await productRef.FocusAsync();
            enterflag = 0;
        }
    }



    private async void AddItemToTransfer()
    {
        if (selectedItem != null  && itemQuantity > 0)
        {
            var existing = TransferItems.FirstOrDefault(x => x.Main_Bar_Item_ID == selectedItem.MainBarItemID && x.Unit_ID == selectedItem.BarItemBaseUnitId);
            if (existing != null)
            {
                TransferItems.Remove(existing);
            }

            var totalStock = initData.barItems
                         .Where(b => b.BarItemId == selectedItem.BarItemId)
                         .SelectMany(b => b.BarItemGodownStocks)
                         .Sum(s => (int?)s.Stock) ?? 0;

            if (itemQuantity > totalStock)
            {
                Snackbar.Add($"Only {totalStock} available .", Severity.Error);
                TransferItems.Add(new StockTransferItemDTO
                    {
                        Main_Bar_Item_ID = selectedItem.MainBarItemID,
                        Unit_ID = selectedItem.BarItemBaseUnitId,
                        TR_Qty = totalStock,
                        ItemName = selectedItem.BarItemName
                    });
            }
            else if (totalStock==0)
            {
                Snackbar.Add($"No Stock available .", Severity.Error);

            }
            else
            {

                TransferItems.Add(new StockTransferItemDTO
                    {
                        Main_Bar_Item_ID = selectedItem.MainBarItemID,
                        Unit_ID = selectedItem.BarItemBaseUnitId,
                        TR_Qty = itemQuantity ?? 0,
                        ItemName = selectedItem.BarItemName
                    });
            }


            if (enterflag == 0)
            {
                selectedItem = null;
                selectedUnit = null;
                itemQuantity = null;

                StateHasChanged();

                await Task.Delay(300);

                await productRef.FocusAsync();
            }
        }
    }

    void RemoveItem(StockTransferItemDTO item)
    {
        TransferItems.Remove(item);
    }

    private Task<IEnumerable<BarItem>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<BarItem>>(filteredMainFillItem);

        var result = filteredMainFillItem
            .Where(p => p.BarItemName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }
    private List<Unit> filteredunits = new();
    private MudAutocomplete<Unit> unitRef;
    private MudTextField<decimal?> quantityRef;
    private MudAutocomplete<BarItem> productRef;

    private async Task HandleProductSelected(BarItem mainitemselect)
    {
        if (selectedItem?.BarItemId != mainitemselect?.BarItemId && mainitemselect != null)
        {
            selectedItem = mainitemselect;

            selectedUnit = mainitemselect.BarItemBaseUnitId;




            // filteredunits = filteredMainFillItem
            //     .Where(i => i.itemId == selectedItem.itemId && i.ItemUnits != null)
            //     .SelectMany(i => i.ItemUnits!) // Flatten the list
            //     .Where(iu => iu.Unit != null) // Avoid null Unit references
            //     .Select(iu => iu.Unit)
            //     .Distinct()
            //     .ToList();



            selectedUnit = null;
            StateHasChanged();

            await Task.Delay(100);

            await quantityRef.FocusAsync();
        }
    }

    private async Task HandleUnitSelected(Unit unitselect)
    {
        // if (selectedUnit?.unitId != unitselect?.unitId && unitselect != null)
        // {
        //     selectedUnit = unitselect;
        //     await Task.Delay(100); // Let autocomplete settle

        //     await quantityRef.FocusAsync();
        // }
    }

    private Task<IEnumerable<Unit>> SearchUnits(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Unit>>(filteredunits);

        var result = (filteredunits ?? new List<Unit>())
            .Where(p => p.unitName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }

    async Task HandleReset()
    {
        TransferItems.Clear();
    }

    async Task HandleStockTransferSave()
    {
        BgService.StopBackgroundTasks();
        if (ToType == 1 && (ToGodownId == null || ToGodownId <= 0))
        {
            Snackbar.Add("Please select a valid destination godown.", Severity.Error);
            return;
        }
        else if (ToType == 2 && (ToCounterId == null || ToCounterId <= 0))
        {
            Snackbar.Add("Please select a valid destination bill station.", Severity.Error);
            return;
        }

        var save = new StockTransfer
        {
            Prefix = "",
            RefNo = "",
            TransferDate = DateTime.UtcNow,
            TransferTime = DateTime.UtcNow,
            FromType = FromType,
            ToType = ToType,
            BranchId = appState.BranchId,
            EmployeeId = appState.LoggedInUserId,
            Notes = "",
            FromGodownId = appState.GodownId,
            FromCounterId = 0,
            ToGodownId = ToGodownId??0,
            ToCounterId = ToCounterId??0,
            StockTransferDetails = TransferItems.Select(x => new StockTransferItem
            {
                MainBarItemId = x.Main_Bar_Item_ID,
                UnitId = x.Unit_ID,
                Quantity = x.TR_Qty,
                ItemName = x.ItemName,
                Notes =  ""
            }).ToList()
        };



        if (TransferItems.Any())
        {
            try
            {
                isLoading = true;

                var saveResult = await saveService.SaveStockTransferAsync(save);
                if (saveResult.IsSuccess)
                {
                    BgService.QueueStockTransferUploadAsync();
                    Snackbar.Clear();
                    Snackbar.Add("Stock Tranfer Saved Successfully!!.", Severity.Success);
                    TransferItems = new();
                }
                else
                {
                    Snackbar.Add("Order Place Error!!. \n" + saveResult.ErrorMessage, Severity.Error);
                    // Console.WriteLine(saveResult.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Order Place Error!!. \n" + ex.Message, Severity.Error);

            }
            finally
            {
                isLoading = false;
            }
        }
        else
        {
            Snackbar.Add("Nothing to order", Severity.Error);
        }

        BgService.StartBackgroundTasks();

    }

    public class StockTransferItemDTO
    {
        public int Main_Bar_Item_ID { get; set; }
        public int Unit_ID { get; set; }
        public decimal TR_Qty { get; set; }
        public string ItemName { get; set; }
    }

    public class StockTransferDTO
    {
        public int Stk_Tr_SlNo { get; set; }
        public string Stk_Tr_Prefix { get; set; }
        public string Stk_Tr_RefNo { get; set; }
        public DateTime Stk_Tr_Date { get; set; }
        public DateTime Stk_Tr_Time { get; set; }
        public int Stock_From_Type { get; set; }
        public int Stock_To_Type { get; set; }
        public int Entry_Branch_ID { get; set; }
        public int Entry_Emp_ID { get; set; }
        public string Stk_Tr_Notes { get; set; }
        public int From_Godown_ID { get; set; }
        public int From_Counter_ID { get; set; }
        public int To_Godown_ID { get; set; }
        public int To_Counter_ID { get; set; }
        public List<StockTransferItemDTO> Items { get; set; } = new();
    }

    public class Godown { public int Id { get; set; } public string Name { get; set; } }
    public class Counter { public int Id { get; set; } public string Name { get; set; } }
}
