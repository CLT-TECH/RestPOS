@page "/final"
@using MAUIBLAZORHYBRID.Data.Data
@using MudBlazor
@using System.Globalization
@using System.Diagnostics
@inject ISnackbar Snackbar
@layout Components.Layout.FullScreenLayout
@inject PosPageService PosService
@inject IJSRuntime JS


<MudPaper Class="vertical-navbar" Elevation="4" @onmouseenter="() => ShowNav()" @onmouseleave="() => HideNav()"
Style="@NavBarWidthStyle">
    <nav aria-label="Main Navigation" class="nav-content">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
        Color="Color.Primary"
        Style="margin-bottom:1rem;"
        OnClick="ToggleNav"
        AriaLabel="Toggle navigation" />
        <ul class="nav-list">
            <li><MudIcon Icon="@Icons.Material.Filled.Home" /><span class="nav-text">Home</span></li>
            <li><MudIcon Icon="@Icons.Material.Filled.Dashboard" /><span class="nav-text">Dashboard</span></li>
            <li><MudIcon Icon="@Icons.Material.Filled.ShoppingCart" /><span class="nav-text">Orders</span></li>
            <li><MudIcon Icon="@Icons.Material.Filled.Settings" /><span class="nav-text">Settings</span></li>
            <li><MudIcon Icon="@Icons.Material.Filled.HelpOutline" /><span class="nav-text">Help</span></li>
        </ul>
    </nav>
</MudPaper>

<MudPaper Class="pos-screen">
    <div class="main-layout">
        <!-- First part: 75-80% width -->
        <div class="left-panel">

            <!-- Header part of first part -->
            <div class="header-part">


                <MudGrid >
                    <MudItem  sm="4">
                        <div class="header-details">
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.Countertops" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Counter: 5</span>
                            </div>
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.TableRestaurant" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Dining Space: 12</span>
                            </div>
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Style="color:#3eb489;" />
                                <span> John Doe</span>
                            </div>
                        </div>

                    </MudItem>
                    <MudItem  sm="5">
                        <MudAutocomplete T="MainItem"
                        Label="Item"
                        Value="selectedProduct"
                        ValueChanged="HandleProductSelected"
                        SearchFunc="SearchProducts"
                        ToStringFunc="(p) => p?.Name"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        @ref="productRef"
                        Immediate="true">
                            <ItemTemplate>
                                <div>@context.Name</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="2">
                        <MudAutocomplete T="Unit"
                        @ref="unitRef"
                        Label="Unit"
                        Value="selectedUnit"
                        ValueChanged="HandleUnitSelected"
                        SearchFunc="SearchUnits"
                        ToStringFunc="(p) => p?.unitName"
                        Adornment="Adornment.None"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        Immediate="true" >
                            <ItemTemplate>
                                <div>@context.unitName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="1" Style="padding-left:0">
                        <MudTextField Immediate="true" T="int?" @ref="quantityRef" Label="Qty" @bind-Value="itemQuantity" OnKeyUp="onEnteronItemQuantity"></MudTextField>
                    </MudItem>


                </MudGrid>

                @*    <MudTextField 
                Placeholder="Search items..."
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                Class="search-box"
                Immediate="true"
                Value="_searchText"
                T="string"
                              ValueChanged="@(newValue => OnSearchChanged(newValue))" tabindex="-1" /> *@



            </div>

            <!-- Body: category list left and item cards right -->
            <div class="body-part">

                <!-- Category list with search box on top -->
                <div class="category-list">
                    <div style="flex:none !important">
                        <MudTextField @bind-Value="_categorySearch" Placeholder="Search categories..."
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" tabindex="-1"
                        Class="category-search" Immediate="true"   />
                    </div>
                    <MudNavMenu Class="category-navmenu">
                        @foreach (var category in filteredcategories)
                        {
                            <MudNavLink 
                            Class="@($"category-link {(category == SelectedCategory ? "selected" : "")}")"
                            OnClick="@(() => SelectCategory(category))">
                                <MudPaper Class="category-card" Elevation="2" Hover="true" >
                                    <MudText Typo="Typo.subtitle1" Class="category-text">@category.catName</MudText>
                                </MudPaper>
                            </MudNavLink>
                        }
                    </MudNavMenu>
                </div>

                <!-- Items container -->
                <div class="items-container">
                    @*   <MudGrid GutterSize="16px">
                        @foreach(var item in FilteredItems)
                        {
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudCard Class="item-card" Elevation="6" Hover="true" @onclick="() => AddToOrder(item)">
                                    <div class="item-image-container">
                                        <MudImage Src="@item.ImageUrl" Alt="@item.Name" Class="item-image" />
                                    </div>
                                    <MudCardContent>
                                        <MudText Typo="Typo.subtitle1" GutterBottom="false">@item.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="item-description">@item.Description</MudText>
                                        <MudText Typo="Typo.subtitle2" Class="item-price">$@item.Price.ToString("F2")</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
 *@

                    <MudGrid>
                        @foreach (var item in FilteredItems)
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3" Style="padding-top:0;padding-bottom:5!important;padding-left:4px!important">
                                <MudCard Class="item-card" Elevation="6" Hover="true" @onclick="() => AddToOrder(item)" tabindex="0">
                                    <div class="item-header">
                                        <div class="item-image-container">
                                            <MudImage Src="@item.picURL" Alt="@item.itemName" Class="item-image" />@* images/imagestemper.png *@
                                        </div>
                                        <MudText Typo="Typo.subtitle2" Class="item-price item-header-price">&#8377;@item.itemRate.ToString("F2")</MudText>
                                    </div>
                                    <MudCardContent Style="padding:8px 0px 2px 8px">
                                        <MudText Typo="Typo.subtitle2" GutterBottom="false" Class="item-title" Style="">@ToTitleCase(item.itemName)</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </div>
            </div>

            <!-- Footer with status and time -->
            <div class="footer-part">
                <div class="footer-left">
                    <MudChip T="string" Class="status-chip">Open Orders: 3</MudChip>
                    <MudChip T="string" Class="status-chip">Running: 5</MudChip>
                    <MudChip T="string" Class="status-chip">Billed: 10</MudChip>
                    <MudChip T="string" Class="status-chip">Vacant Tables: 8</MudChip>
                </div>
                <div class="footer-right">
                    <MudText Typo="Typo.subtitle2">@DateTime.Now.ToString("hh:mm tt")</MudText>
                </div>
            </div>
        </div>

        <!-- Second part: ordered items list -->
        <div class="right-panel">
            @*     <MudPaper Class="order-list" Elevation="6">
                <MudText Typo="Typo.h5" Class="order-list-header">Ordered Items</MudText>
                <MudList T="object" Class="ordered-items-list">
                    @if (OrderedItems == null || !OrderedItems.Any())
                    {
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="empty-order-text">No items ordered yet.</MudText>
                    }
                    else
                    {
                        @foreach (var orderItem in OrderedItems)
                        {
                            <MudListItem Class="ordered-list-item">
                                <MudText Typo="Typo.subtitle1">@orderItem.Name</MudText>
                                <MudSpacer />
                                <MudText Typo="Typo.subtitle1" >$@orderItem.Price.ToString("F2") x @orderItem.Quantity = $@(orderItem.Price * orderItem.Quantity)</MudText>
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudPaper> *@

            <MudPaper Class="custom-order-list" Elevation="6">
                @* <MudText Typo="Typo.h5" Class="custom-order-header">Ordered Items</MudText> *@

                <div class="custom-order-header-row">
                    <MudText Typo="Typo.h5" Class="custom-order-header">
                        Ordered Items
                    </MudText>

                    <MudTextField 
                        T="string"
                        @bind-Value="qrCode"
                                  Placeholder="Item qr code..."
                                  Class="custom-order-qrcode" />
                </div>

                <div id="scrollContainer" class="custom-ordered-items-list">
                <MudList T="object">
                    @if (OrderedItems == null || !OrderedItems.Any())
                    {
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="custom-empty-order-text">
                            No items ordered yet.
                        </MudText>
                    }
                    else
                    {
                            @foreach (var orderItem in OrderedItems.AsEnumerable().Reverse())
                        {
                            <MudListItem Class="custom-ordered-list-item">

                                <MudText Class="custom-order-line1"  Align="Align.Left">@ToTitleCase(orderItem.Name)</MudText>

                                <div class="custom-order-line2">
                                    <div class="order-controls">
                                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                        Style="color:#3eb489"
                                        Size="Size.Small"
                                        Variant="Variant.Text"
                                        OnClick="@(() => AddItem(orderItem))" />

                                        <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle"
                                                       Style="color:#3eb489"
                                        Size="Size.Small"
                                        Variant="Variant.Text"
                                        OnClick="@(() => MinusItem(orderItem))" />
                                    </div>
                                    ₹@orderItem.Price.ToString("F2") x @orderItem.Quantity
                                    <span class="custom-order-total">= <span>₹@orderItem.Amount.ToString("F2")</span></span>
                                </div>



                                <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline"
                                Class="delete-button-inside"
                                Color="Color.Error"
                                Size="Size.Small"
                                Variant="Variant.Text"
                                OnClick="@(() => DeleteItem(orderItem))" />
                            </MudListItem>
                        }
                    }
                </MudList>
                </div>
                <MudCard Class="custom-order-footer" >
                    <MudCardContent Class="pa-0" Style="width:100%">

                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary">Cash</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Secondary">Card</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Info">Wallet</MudChip>
                        <div class="row-between">
                            <div class="left-content">
                        <!-- Line 1: Total + Icons -->
                        <div class="summary-line summary-header">
                            <MudText Typo="Typo.subtitle1" Class="label">Total:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="value">₹@TotalAmount.ToString("F2")</MudText>

                            <MudIconButton Icon="@Icons.Material.Filled.LocalOffer"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           OnClick="ApplyDiscount" />

                            <MudIconButton Icon="@Icons.Material.Filled.EmojiEmotions"
                                           Color="Color.Secondary"
                                           Size="Size.Small"
                                           OnClick="ApplyLoyalty" />
                        </div>

                        <!-- Discount Line -->
                        @if (DiscountPercent > 0)
                        {
                            <div class="summary-line">
                                <MudText Typo="Typo.body2" Class="label">Discount:</MudText>
                                <MudText Typo="Typo.body2" Class="value">@DiscountPercent% - ₹@DiscountAmount.ToString("F2")</MudText>
                            </div>

                            <div class="summary-line">
                                <MudText Typo="Typo.body2" Class="label">Subtotal:</MudText>
                                <MudText Typo="Typo.body2" Class="value">₹@SubTotal.ToString("F2")</MudText>
                            </div>
                        }

                        <!-- Tax Line -->
                        <div class="summary-line">
                            <MudText Typo="Typo.body2" Class="label">Tax (@TaxPercent%):</MudText>
                            <MudText Typo="Typo.body2" Class="value">₹@TaxAmount.ToString("F2")</MudText>
                        </div>

                        <!-- Grand Total -->
                        <div class="summary-line summary-total">
                            <MudText Typo="Typo.h6" Class="label">Grand Total:</MudText>
                            <MudText Typo="Typo.h6" Class="value">₹@GrandTotal.ToString("F2")</MudText>
                        </div>
                        </div>
                            <div class="right-content">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.Save"
                                           Class="summary-action-button">
                            </MudButton>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        </div>
    </div>
</MudPaper>
@code {

    decimal TotalAmount => OrderedItems.Sum(x => x.Amount);
    decimal DiscountPercent { get; set; } = 0;
    decimal DiscountAmount => TotalAmount * DiscountPercent / 100;
    decimal SubTotal => TotalAmount - DiscountAmount;
    decimal TaxPercent => 5;
    decimal TaxAmount => (DiscountPercent > 0 ? SubTotal : TotalAmount) * TaxPercent / 100;
    decimal GrandTotal => (DiscountPercent > 0 ? SubTotal : TotalAmount) + TaxAmount;

    void ApplyDiscount()
    {
        DiscountPercent = DiscountPercent == 0 ? 10 : 0; // Toggle for example
    }

    void ApplyLoyalty()
    {
        // Not yet implemented
    }

    public string qrCode { get; set; }
    public bool intermediateTime { get; set; } = true;


    private async void onEnteronItemQuantity(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Code == "Enter")
        {


            var matchedItem = Items
                .FirstOrDefault(i => i.MainItemId == selectedProduct.Id && i.unitId == selectedUnit.unitId);

            if (matchedItem != null)
            {
                if (itemQuantity >= 0)
                {
                    AddToOrderHeader(matchedItem, itemQuantity??0);


                    itemQuantity = null;
                    await quantityRef.ResetAsync(); // 👈 this clears the UI value

                    selectedProduct = null;
                    await productRef.ResetAsync(); // 👈 this clears the UI value

                    selectedUnit = null;
                    await unitRef.ResetAsync(); // 👈 this clears the UI value


                    StateHasChanged();


                    // Re-focus the field to ensure visual update
                    await Task.Delay(10); // Small delay for render cycle
                    await productRef.FocusAsync();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("unknown quanity!!.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("no item found!!.", Severity.Error);
            }
        }
    }



    public int? itemQuantity { get; set; }
    private async Task HandleProductSelected(MainItem mainitemselect)
    {
        if (intermediateTime)
        {
            if (selectedProduct?.Id != mainitemselect?.Id && mainitemselect != null)
            {
                selectedProduct = mainitemselect;

                filteredunits = Items
                .Where(i => i.MainItemId == selectedProduct.Id && i.Unit != null)
                .Select(i => i.Unit)
                .DistinctBy(u => u.unitId) 
                .ToList();
                await Task.Delay(100); // Let autocomplete settle
                await unitRef.FocusAsync(); // 👈 Move to NEXT field
            }
        }
    }
    private async Task HandleUnitSelected(Unit unitselect)
    {
        if (selectedUnit?.unitId != unitselect?.unitId && unitselect != null)
        {
            selectedUnit = unitselect;
            await Task.Delay(100); // Let autocomplete settle
            await quantityRef.FocusAsync(); // 👈 Move to NEXT field
        }
    }
    private MainItem selectedProduct;
    private Unit selectedUnit;
    private MudAutocomplete<MainItem> productRef;
    private MudAutocomplete<Unit> unitRef;
    private MudTextField<int?> quantityRef;



    private Task<IEnumerable<Unit>> SearchUnits(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Unit>>(filteredunits);

        var result = filteredunits
            .Where(p => p.unitName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }


    private Task<IEnumerable<MainItem>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<MainItem>>(mainitems);

        var result = mainitems
            .Where(p => p.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }

    private void ClickMe()
    {
        Console.WriteLine("Button clicked!");
    }
    private bool IsNavVisible = false;
    private string NavBarWidthStyle => $"width: {(IsNavVisible ? "240px" : "40px")};";

    private void ShowNav() => IsNavVisible = true;
    private void HideNav() => IsNavVisible = false;
    private void ToggleNav() => IsNavVisible = !IsNavVisible;

    private string _searchText = string.Empty;
    private string _categorySearchText = string.Empty;

    public string _categorySearch
    {
        get => _categorySearchText;
        set
        {
            _categorySearchText = value;
            FilterCategories();
        }
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(_categorySearchText))
        {
            filteredcategories = categories.ToList();
        }
        else
        {
            filteredcategories = categories
                .Where(c => c.catName.Contains(_categorySearchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private List<Category> categories = new();
    private List<Category> filteredcategories = new();
    private List<Item> Items = new();
    private List<MainItem> mainitems = new();
    private List<Unit> filteredunits = new();

    private List<ItemOrder> OrderedItems = new List<ItemOrder>();

    protected override async Task OnInitializedAsync()
    {
        categories = await PosService.GetCategoriesAsync();

        Items = await PosService.GetItemsAsync();

        mainitems = await PosService.GetMainItemsAsync();

        filteredunits = await PosService.GetUnitsAsync();

        var allCategory = new Category { catId = 0, catName = "All" };

        categories.Insert(0, allCategory); // Add to top
        SelectedCategory = allCategory;
        filteredcategories = categories.ToList();

        FilteredItems = Items.ToList();
        Console.WriteLine("loaded!");

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
    }


    private void OnSearchChanged(object value)
    {
        _searchText = value.ToString();
        ApplyFilters();
    }

    private void OnCategorySearchChanged(string value)
    {
        _categorySearchText = value;
    }



    private Category SelectedCategory;

    private void SelectCategory(Category category)
    {
        SelectedCategory = category;
        ApplyFilters();
    }



    private void ApplyFilters()
    {
        FilteredItems = Items
        .Where(item =>
            (SelectedCategory .catId==0 || item.SubCategory.Category == SelectedCategory) &&
            (string.IsNullOrWhiteSpace(_searchText) ||
                item.itemName.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
        )
        .ToList();
    }

    private void AddToOrder(Item item)
    {
        var existingOrder = OrderedItems.FirstOrDefault(o => o.Id == item.itemId);
        if (existingOrder == null)
        {
            OrderedItems.Add(new ItemOrder { Id = item.itemId, Name = item.itemName, Price = item.itemRate, Quantity = 1,Amount=item.itemRate });
        }
        else
        {
            existingOrder.Quantity++;
            var itemamount = Math.Round(existingOrder.Quantity * existingOrder.Price, 2);
            existingOrder.Amount = itemamount;
        }

        Snackbar.Clear();
        Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });


        // _=ScrollToBottom();
    }

    private void AddToOrderHeader(Item item,int Qty)
    {
        var existingOrder = OrderedItems.FirstOrDefault(o => o.Id == item.itemId);

        if (existingOrder == null)
        {
            var itemamount = Math.Round(Qty * item.itemRate, 2);

            if (Qty > 0)
            {
                OrderedItems.Add(new ItemOrder { Id = item.itemId, Name = item.itemName, Price = item.itemRate, Quantity = Qty, Amount = itemamount });
                Snackbar.Clear();
                Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
            }
        }
        else
        {
            if (Qty > 0)
            {
                existingOrder.Quantity = Qty;
                var itemamount = Math.Round(existingOrder.Quantity * existingOrder.Price, 2);
                existingOrder.Amount = itemamount;
            }
            else
            {
                OrderedItems.Remove(existingOrder);
                Snackbar.Clear();
                Snackbar.Add($"{item.itemName} removed from order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
            }
        }
    }
    private void AddItem(ItemOrder addItem)
    {
        addItem.Quantity ++;

        var itemamount = Math.Round(addItem.Quantity * addItem.Price, 2);
        addItem.Amount = itemamount;
    }
    private void MinusItem(ItemOrder minuItem)
    {
        if (minuItem.Quantity != 1)
        {
            minuItem.Quantity--;
            var itemamount = Math.Round(minuItem.Quantity * minuItem.Price, 2);
            minuItem.Amount = itemamount;
        }
        else
            OrderedItems.Remove(minuItem);


    }
    private void DeleteItem(ItemOrder deleteItem)
    {
        OrderedItems.Remove(deleteItem);
    }

    private List<Item> FilteredItems = new();

    private class ItemOrder
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
    }

    private string ToTitleCase(string input)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }

    async Task ScrollToBottom()
    {
        await Task.Delay(2000); // 2 seconds
        await JS.InvokeVoidAsync("scrollToBottom", "scrollContainer");
    }
}

<style>
   
    /* Updated Category List Colors and Text */
    /* Mint Green Theme Variables */
    :root {
        --mint-green-light: #d1f2eb;
        --mint-green: #3eb489;
        --mint-green-dark: #2e7e77;
        --mint-green-text: #065a52;
        --background-color: #eaf6f4;
        --card-background: #ffffff;
        --text-color: #04675e;
        --text-muted: #4a6a63;
        --box-shadow: 0 4px 8px rgba(62, 180, 137, 0.15);
    }

    .pos-screen {
        background-color: var(--background-color);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: stretch;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: var(--text-color);
        padding: 16px;
    }

    .main-layout {
        display: flex;
        width: 100%;
        max-width: 1600px;
        gap: 16px;
        height: 100%;
        padding-left: 32px;
    }

    .left-panel {
        flex: 5 1 0;
        display: flex;
        flex-direction: column;
        background-color: var(--card-background);
        border-radius: 12px;
        box-shadow: var(--box-shadow);
        padding: 16px;
        overflow: hidden;
        border: 1px solid #3eb489;
    }

    .right-panel {
        flex: 2 1 0;
        background-color: var(--card-background);
        border-radius: 12px;
        box-shadow: var(--box-shadow);
        display: flex;
        flex-direction: column;
    }

    .header-part {
        display: flex;
        align-items: center;
        gap: 32px;
        margin-bottom: 12px;
        flex-wrap: wrap;
        border-bottom: 1px solid var(--mint-green-light);
    }

    .search-box .mud-input-root {
        background-color: var(--mint-green-light);
        border: none;
        padding-left: 40px;
        transition: box-shadow 0.3s ease;
        color: var(--mint-green-text);
        font-weight: 600;
    }

        .search-box .mud-input-root:hover,
        .search-box .mud-input-root:focus-within {
            box-shadow: 0 5px 12px rgb(62 180 137 / 0.7);
        }

    .search-box input {
        color: var(--mint-green-text);
        font-size: 1.1rem;
        font-weight: 600;
    }

    .header-details {
        display:flex;
        flex-wrap:wrap;
        color: var(--mint-green-dark);
        gap:6px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .header-detail-item {
        align-items: center;
        gap: 8px;
    }

    .body-part {
        display: flex;
        flex: 1;
        overflow: hidden;
        gap: 16px;
    }

    .category-list {
        width: 220px;
        display: flex;
        flex-direction: column;
        gap: 0 !important;
    }

    .category-search .mud-input-root {
        border-radius: 8px;
        background-color: var(--mint-green-light);
        border: none;
        padding-left: 40px;
        margin-bottom: 12px;
        color: var(--mint-green-text);
        font-weight: 600;
    }



        .category-search .mud-input-root:hover,
        .category-search .mud-input-root:focus-within {
            box-shadow: 0 5px 12px rgb(62 180 137 / 0.7);
        }

    /* Updated category nav and category cards */
    .category-navmenu {
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding-right: 4px;
        justify-content: flex-start; /* Explicitly pack items at top */
        margin-top: 0; /* Remove any auto margins */
        align-items: stretch;
    }

    .category-link .mud-nav-link:hover {
        background-color: transparent !important;
        color: inherit !important;
        box-shadow: none !important;
    }

    /* Changed from gradient green to light neutral background and crisp border */
    .category-card {
        padding: 14px 18px;
        border-radius: 12px;
        background-color: #f9f9f9;
        color: #3a3a3a;
        font-weight: 600;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        cursor: pointer;
        transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.25s ease;
        user-select: none;
        border: 1px solid transparent;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

        .category-card:hover {
            background-color: #e1f0eb;
            box-shadow: 0 4px 8px rgba(62, 180, 137, 0.15);
            transform: translateY(-3px);
            border-color: #3eb489;
            color: #3eb489;
        }

    .category-link.selected .category-card {
        background-color: #3eb489;
        color: white;
        box-shadow: 0 6px 12px rgba(62, 180, 137, 0.4);
        font-weight: 700;
        border-color: #2e7e77;
        transform: translateY(-2px);
    }

    .category-text {
        width: 100%;
    }

    /* Items container */
    .items-container {
        flex: 1;
        overflow-y: auto;
        padding-right: 8px;
        padding-top: 24px;
        padding-left: 24px;
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        align-content: flex-start;
        box-shadow: inset 0 0 10px var(--mint-green-light);
        border-radius: 8px;
    }

    /* Modified item card for uniform size and margins/padding adjustments */
    .item-card {
        border-radius: 16px;
        transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
        box-shadow: var(--box-shadow);
        display: flex;
        flex-direction: column;
        min-height: 110px; /* uniform height */
        margin-top: 12px;
        margin-left: 6px;
        width: 100%;
    }

        .item-card .mud-card-media {
            aspect-ratio: 4 / 3;
            object-fit: contain;
            background-color: white; /* Optional to make background clean */
            border-top-left-radius: 16px;
            border-top-right-radius: 16px;
        }

        .item-card:hover,
        .item-card:focus,
        /* For focus-visible browsers */
        .item-card:focus-visible {
            transform: translateY(-6px);
            box-shadow: 0 12px 24px rgb(62 180 137 / 0.75);
        }

        .item-card:focus {
            outline: none;
        }

        .item-card:first-child {
            margin-left: 0;
        }

    .item-description {
        color: var(--text-muted);
        font-size: 0.85rem;
        height: 36px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .item-card .item-title {
        font-weight: bold;
        word-wrap: break-word; /* Optional: breaks long words */
        overflow-wrap: break-word; /* Standard version of the above */
        white-space: normal; /* Allows normal wrapping */
    }



    .item-price {
        font-weight: 700;
        margin-top: 8px;
        color: #3eb489;
    }

    .footer-part {
        margin-top: 12px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid var(--mint-green-light);
        box-shadow: inset 0 0 10px var(--mint-green-light);
        border-radius: 8px;
        padding: 8px;
    }

    .footer-left {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .status-chip {
        border: 1px solid #3eb489;
        color: #2e7e77;
        background-color: #e6f2ef;
        font-weight: 600;
    }

    .footer-right {
        font-weight: 600;
        color: var(--mint-green-dark);
    }

    .order-list {
        padding: 16px;
        border-radius: 16px;
        /* background-color: var(--mint-green-light); */
        display: flex;
        flex-direction: column;
        height: 100%;
        border: 1px solid #3eb489;
    }

    .order-list-header {
        margin-bottom: 12px;
        color: var(--mint-green-dark);
        font-weight: 700;
    }

    .ordered-items-list {
        overflow-y: auto;
        flex: 1;
    }

    .ordered-list-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 12px;
        border-radius: 12px;
        margin-bottom: 8px;
        transition: background-color 0.2s ease;
    }

        .ordered-list-item:hover {
            background-color: var(--mint-green);
            color: white;
        }

    .empty-order-text {
        color: var(--mint-green-dark);
        font-style: italic;
        opacity: 0.7;
        margin-top: 48px;
    }

    .item-image-container {
        width: 100%;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        border-top-left-radius: 16px;
        border-top-right-radius: 16px;
        background-color: #fff; /* fallback if image is transparent */
        margin-left: 8px;
    }

    .item-image {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain !important
    }

    .vertical-navbar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        background-color: #ffffff;
        box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
        border-top-right-radius: 12px;
        border-bottom-right-radius: 12px;
        overflow-x: hidden;
        transition: width 0.3s ease;
        z-index: 1100;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 1rem;
    }

    .nav-content {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding-left: 0;
    }

    .nav-list {
        list-style: none;
        padding: 0;
        margin: 0;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
    }

        .nav-list li {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #6b7280; /* neutral gray */
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            padding: 0.4rem 0.5rem;
            border-radius: 0.5rem;
            transition: background-color 0.25s ease, color 0.25s ease;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

            .nav-list li:hover {
                background-color: #f3f4f6;
                color: #111827; /* darker text on hover */
            }

            .nav-list li .mud-icon-root {
                color: #6b7280;
                min-width: 24px;
                min-height: 24px;
            }

    .vertical-navbar:not(:hover) .nav-text {
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s ease;
    }

    .vertical-navbar:hover .nav-text {
        opacity: 1;
        transition: opacity 0.3s 0.1s ease;
    }

    .item-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 2px 4px;
        background-color: #fff; /* Matches your image container background */
        border-top-left-radius: 16px;
        border-top-right-radius: 16px;
    }

        .item-header .item-image-container {
            width: 50px; /* Fixed width to keep image compact */
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .item-header .item-image {
            max-height: 100%;
            max-width: 100%;
            object-fit: contain !important;
        }

    .item-header-price {
        font-weight: 700;
        color: #3eb489; /* Matches your mint-green theme for price */
        text-align: right;
        flex-shrink: 0; /* Prevents price from shrinking too much */
        margin-left: 8px;
    }

    .custom-order-list {
        padding: 16px;
        border-radius: 16px;
        border: 1px solid #3eb489;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

   .custom-order-header-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 12px;
        gap: 16px;
        flex-wrap: wrap;
         flex-shrink: 0;
    }

    .custom-order-qrcode {
        width: 100px;
    }

    .custom-order-header {
        margin-bottom: 12px;
        color: var(--mint-green-dark);
        font-weight: 700;
    }

    .custom-ordered-items-list {
        overflow-y: auto;
        flex: 1;
        margin-bottom: 12px; /* adds spacing before footer */
    }

    .custom-order-footer {
        flex-shrink: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 16px;
    }

    .custom-ordered-list-item {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding: 10px 14px;
        margin-bottom: 10px;
        border-radius: 12px;
        background-color: #f8f9fa;
        transition: background-color 0.2s ease;
        width:100% !important;

    }

    .mud-list-item-text {
        display: flex;
        flex-direction: column;
        width: 100%;
        flex: 1 1 auto;
        overflow: hidden;
    }

       /*  .custom-ordered-list-item:hover {
            background-color: var(--mint-green);
            color: white;
        } */

    .custom-order-line1 {
        font-weight: bold;
        font-size: 1rem;
        white-space: normal;
        word-wrap: break-word;
        text-align: left; /* ← Add this */
        width: 75% !important;
    }

    .custom-order-line2 {
        font-size: 0.875rem;
        color: #555;
        display: flex;
        justify-content: space-between;
        margin-top: 4px;
        text-align: left; /* ← Add this */
        width: 100% !important;
    }

    order-controls {
        display: flex;
        gap: 4px;
        flex-shrink: 0;
    }


    .custom-order-total {
        font-weight: 600;
        color: #222;
    }

    .custom-empty-order-text {
        color: var(--mint-green-dark);
        font-style: italic;
        opacity: 0.7;
        margin-top: 48px;
    }

    .delete-button-inside {
        position: absolute;
        top: -2px;
        right: -2px;
        z-index: 1;
    }

    .summary-line {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .summary-header {
    }

    .summary-total {
        font-weight: bold;
    }

    .label {
        flex: 1;
    }

    .value {
        flex-shrink: 0;
        text-align: right;
    }

    .row-between {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
    }

    .left-content {
        flex: 1;
    }

    .right-content {
        display: flex; /* Nested flexbox */
        justify-content: flex-end; /* Aligns button to the right */
        align-items: flex-end; /* Aligns button to the bottom */
        flex-shrink: 0; /* Prevents shrinking */
        padding: 16px; /*
    }

    .summary-action-button {
        align-self: flex-end; /* Pushes to bottom-right */
        margin-top: auto;
        margin-top: 16px;
    }
</style>
