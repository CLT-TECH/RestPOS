@page "/"
@using MAUIBLAZORHYBRID.Data.DTO
@using MAUIBLAZORHYBRID.Data.Data
@using MAUIBLAZORHYBRID.Services.Sync
@using MudBlazor
@using System.Globalization
@using System.Diagnostics
@inject ISnackbar Snackbar
@layout Components.Layout.FullScreenLayout
@inject PosPageService PosService
@inject IJSRuntime JS
@inject ISyncService SyncService
@inject HttpClient Http
@using System.Text.Json;


<MudPaper Class="pos-screen">
    <div class="main-layout">
        <!-- First part: 75-80% width -->
        <div class="left-panel">

            <!-- Header part of first part -->
            <div class="header-part">


                <MudGrid >
                    <MudItem  sm="4">
                        <div class="header-details">
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.Countertops" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Counter: <span id="diningspace"></span>@countername</span>
                            </div>
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.TableRestaurant" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Dining Space: <span id="diningspace">@diningspacename</span></span>
                            </div>
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Style="color:#3eb489;" />
                                <span> ADMIN</span>
                            </div>
                        </div>

                    </MudItem>
                    <MudItem  sm="5">
                        <MudAutocomplete T="BillItem"
                        Label="Item"
                        Value="selectedItem"
                        ValueChanged="HandleProductSelected"
                        SearchFunc="SearchProducts"
                        ToStringFunc="(p) => p?.itemName"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        @ref="productRef"
                        Immediate="true">
                            <ItemTemplate>
                                <div>@context.itemName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="2">
                        <MudAutocomplete T="Unit"
                        @ref="unitRef"
                        Label="Unit"
                        Value="selectedUnit"
                        ValueChanged="HandleUnitSelected"
                        SearchFunc="SearchUnits"
                        ToStringFunc="(p) => p?.unitName"
                        Adornment="Adornment.None"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        Immediate="true" >
                            <ItemTemplate>
                                <div>@context.unitName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="1" Style="padding-left:0">
                        <MudTextField Immediate="true" T="int?" @ref="quantityRef" Label="Qty" @bind-Value="itemQuantity" OnKeyUp="onEnteronItemQuantity"></MudTextField>
                    </MudItem>


                </MudGrid>

              


            </div>

            <!-- Body: category list left and item cards right -->
            <div class="body-part">

                <!-- Category list with search box on top -->
                <div class="category-list">
                    <div style="flex:none !important">
                        <MudTextField @bind-Value="_categorySearch" Placeholder="Search categories..."
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" tabindex="-1"
                        Class="category-search" Immediate="true"   />
                    </div>
                    <MudNavMenu Class="category-navmenu">
                        @foreach (var category in filteredcategories)
                        {
                            <MudNavLink 
                            Class="@($"category-link {(category == SelectedCategory ? "selected" : "")}")"
                            OnClick="@(() => SelectCategory(category))">
                                <MudPaper Class="category-card" Elevation="2" Hover="true" >
                                    <MudText Typo="Typo.subtitle1" Class="category-text">@category.catName</MudText>
                                </MudPaper>
                            </MudNavLink>
                        }
                    </MudNavMenu>
                </div>

                <!-- Items container -->
                <div class="items-container">
                   


                    <MudGrid>
                        @foreach (var item in filteredSubFillItemlist)
                        {
                            decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                            if(rate>0)
                            {
                                <MudItem xs="12" sm="6" md="4" lg="3" Style="padding-top:0;padding-bottom:5px!important;padding-left:4px!important">
                                    <MudCard Class="item-card" Elevation="6" Hover="true" @onclick="() => AddToOrderBillItem(item)" tabindex="0">
                                        <div class="item-header">
                                            <div class="item-image-container">
                                                <MudImage Src="images/images.jpg" Alt="@item.itemName" Class="item-image" />
                                            </div>
                                            <MudText Typo="Typo.subtitle2" Class="item-price item-header-price">&#8377;@rate.ToString("F2")</MudText>
                                        </div>
                                        <MudCardContent Style="padding:8px 0px 2px 8px">
                                            <MudText Typo="Typo.subtitle2" GutterBottom="false" Class="item-title" Style="">@ToTitleCase(item.itemName)</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </div>
            </div>

            <!-- Footer with status and time -->
            <div class="footer-part">
                <div class="footer-left">
                    <MudChip T="string" Class="status-chip">Open Orders: 3</MudChip>
                    <MudChip T="string" Class="status-chip">Running: 5</MudChip>
                    <MudChip T="string" Class="status-chip">Billed: 10</MudChip>
                    <MudChip T="string" Class="status-chip">Vacant Tables: 8</MudChip>
                </div>
                <div class="footer-right">
                    <MudText Typo="Typo.subtitle2">@DateTime.Now.ToString("hh:mm tt")</MudText>
                </div>
            </div>
        </div>

        <!-- Second part: ordered items list -->
        <div class="right-panel">
          

            <MudPaper Class="custom-order-list" Elevation="6">

                <div class="custom-order-header-row">
                    <MudText Typo="Typo.h5" Class="custom-order-header">
                        Ordered Items
                    </MudText>

                    <MudTextField 
                    T="string"
                    @bind-Value="qrCode"
                    Placeholder="Item qr code..."
                    Class="custom-order-qrcode" />
                </div>

                <div id="scrollContainer" class="custom-ordered-items-list">
                    <MudList T="object">
                        @if (OrderedItems == null || !OrderedItems.Any())
                        {
                            <MudText Typo="Typo.body1" Align="Align.Center" Class="custom-empty-order-text">
                                No items ordered yet.
                            </MudText>
                        }
                        else
                        {
                            @foreach (var orderItem in OrderedItems.AsEnumerable().Reverse())
                            {
                                <MudListItem Class="custom-ordered-list-item">

                                    <MudText Class="custom-order-line1"  Align="Align.Left">@ToTitleCase(orderItem.Name)</MudText>

                                    <div class="custom-order-line2">
                                        <div class="order-controls">
                                            <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                            Style="color:#3eb489"
                                            Size="Size.Small"
                                            Variant="Variant.Text"
                                            OnClick="@(() => AddItem(orderItem))" />

                                            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle"
                                            Style="color:#3eb489"
                                            Size="Size.Small"
                                            Variant="Variant.Text"
                                            OnClick="@(() => MinusItem(orderItem))" />
                                        </div>
                                        ₹@orderItem.Price.ToString("F2") x @orderItem.Quantity
                                        <span class="custom-order-total">= <span>₹@orderItem.Amount.ToString("F2")</span></span>
                                    </div>



                                    <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline"
                                    Class="delete-button-inside"
                                    Color="Color.Error"
                                    Size="Size.Small"
                                    Variant="Variant.Text"
                                    OnClick="@(() => DeleteItem(orderItem))" />
                                </MudListItem>
                            }
                        }
                    </MudList>
                </div>
                <MudCard Class="custom-order-footer" >
                    <MudCardContent Class="pa-0" Style="width:100%">

                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary">Cash</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Secondary">Card</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Info">Wallet</MudChip>
                        <div class="row-between">
                            <div class="left-content">
                                <!-- Line 1: Total + Icons -->
                                <div class="summary-line summary-header">
                                    <MudText Typo="Typo.subtitle1" Class="label">Total:</MudText>
                                    <MudText Typo="Typo.subtitle1" Class="value">₹@TotalAmount.ToString("F2")</MudText>

                                    <MudIconButton Icon="@Icons.Material.Filled.LocalOffer"
                                    Color="Color.Primary"
                                    Size="Size.Small"
                                    OnClick="ApplyDiscount" />

                                    <MudIconButton Icon="@Icons.Material.Filled.EmojiEmotions"
                                    Color="Color.Secondary"
                                    Size="Size.Small"
                                    OnClick="ApplyLoyalty" />
                                </div>

                                <!-- Discount Line -->
                                @if (DiscountPercent > 0)
                                {
                                    <div class="summary-line">
                                        <MudText Typo="Typo.body2" Class="label">Discount:</MudText>
                                        <MudText Typo="Typo.body2" Class="value">@DiscountPercent% - ₹@DiscountAmount.ToString("F2")</MudText>
                                    </div>

                                    <div class="summary-line">
                                        <MudText Typo="Typo.body2" Class="label">Subtotal:</MudText>
                                        <MudText Typo="Typo.body2" Class="value">₹@SubTotal.ToString("F2")</MudText>
                                    </div>
                                }

                                <!-- Tax Line -->
                                <div class="summary-line" style="display:none">
                                    <MudText Typo="Typo.body2" Class="label">Tax (@TaxPercent%):</MudText>
                                    <MudText Typo="Typo.body2" Class="value">₹@TaxAmount.ToString("F2")</MudText>
                                </div>

                                <!-- Grand Total -->
                                <div class="summary-line summary-total">
                                    <MudText Typo="Typo.h6" Class="label">Grand Total:</MudText>
                                    <MudText Typo="Typo.h6" Class="value">₹@GrandTotal.ToString("F2")</MudText>
                                </div>
                            </div>
                            <div class="right-content">
                                <MudButton Variant="Variant.Filled"
                                Color="Color.Success"
                                StartIcon="@Icons.Material.Filled.Save"
                                Class="summary-action-button" OnClick="HandleSave">
                                </MudButton>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        </div>
    </div>
</MudPaper>

@if (isLoading)
{
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.4); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <MudProgressCircular Color="Color.Primary"   Indeterminate="true" />
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">Saving....</MudText>
        </div>
    </div>
}
@code {
    private bool isLoading = false;

    public sealed class SaveBillResponse
    {
        public string? Message { get; init; }
    }

    private BillMasterDTO newbillmaster = new();
    private HotBillItemDetailDTO detail = new();
    private async Task HandleSave()
    {
        try
        {
            isLoading = true;
            if (OrderedItems.Any())
            {
                newbillmaster = new BillMasterDTO
                    {
                        Hot_Bill_Type = 0,
                        Hot_Bill_Prefix = "CB",
                        Hot_Bill_No = 123,
                        Bearer_ID = 1,
                        Hot_Bill_Item_Total = TotalAmount,
                        Hot_Bill_Tax_Total = 0.00m,
                        B4Round_Amt = TotalAmount,
                        Round_Need = 0,
                        RoundOff_Val = 0.00m,
                        Hot_Bill_NeT_Amt = TotalAmount,
                        Cashier_Found = 0,
                        Hot_Bill_Notes = "No remarks",
                        App_Machine_ID = 0,
                        Branch_ID = 1,
                        Dining_Space_ID = 1,
                        Entered_Emp_ID = 1,
                        Counter_ID = 1,
                        Customer_Mobile = "9999999999"
                    };


                newbillmaster.Items = new List<HotBillItemDetailDTO>();

                foreach (var orderedItem in OrderedItems)
                {
                    var detail = new HotBillItemDetailDTO
                        {
                            Hot_Bill_ID = 0, // usually set after master insert
                            Item_ID = orderedItem.ItemId,
                            BarCode = "",
                            Qty = orderedItem.Quantity,
                            Unit_ID = orderedItem.UnitID,
                            Det_Rate = orderedItem.Price,               // if exists
                            Det_Amt = orderedItem.Amount,
                            Det_Disc_Per = 0,
                            Det_Disc_Amt = 0,
                            Det_Gross_Amt = orderedItem.Amount,
                            Det_Tax_Per = 0,
                            Det_Tax_Amt = 0,
                            Det_Net_Amt = orderedItem.Amount
                        };

                    newbillmaster.Items.Add(detail);
                }

                var json = JsonSerializer.Serialize(newbillmaster, new JsonSerializerOptions
                    {
                        WriteIndented = true
                    });


                var response = await Http.PostAsJsonAsync("api/AppSync/SaveBill", newbillmaster);
                if (response.IsSuccessStatusCode)
                {
                    var body = await response.Content.ReadFromJsonAsync<SaveBillResponse>();

                    var billId = body?.Message ?? "(unknown)";

                    Snackbar.Add($"Bill #{billId} saved successfully", Severity.Success);
                    OrderedItems = new();
                }
                else
                {
                    // var saveMessage = error?.Message ?? "Failed to save bill.";
                    string errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Save failed: {errorMessage}", Severity.Error);
                }
            }
            else
                Snackbar.Add("Nothing to save", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }


    public int selectedDiningSpace { get; set; } = 1;
    decimal TotalAmount => OrderedItems.Sum(x => x.Amount);
    decimal DiscountPercent { get; set; } = 0;
    decimal DiscountAmount => TotalAmount * DiscountPercent / 100;
    decimal SubTotal => TotalAmount - DiscountAmount;
    decimal TaxPercent => 0;
    decimal TaxAmount => (DiscountPercent > 0 ? SubTotal : TotalAmount) * TaxPercent / 100;
    decimal GrandTotal => (DiscountPercent > 0 ? SubTotal : TotalAmount) + TaxAmount;


    private List<Category> categories = new();
    private List<Category> filteredcategories = new();
    private List<Item> Items = new();
    private List<BillItem> BillItems = new();
    private List<MainItem> mainitems = new();
    private List<Unit> filteredunits = new();
    private List<ItemOrder> OrderedItems = new List<ItemOrder>();

    private List<BillItem> filteredMainFillItem = new();
    private List<BillItem> filteredSubFillItem = new();
    private List<BillItem> filteredSubFillItemlist = new();

    private List<VWItemParentChild> parentchildrenitem = new();
    private List<DiningSpaceItemRate> dsitemrate = new();




    private List<DiningSpace> dspace = new();
    private List<BillStation> billstationsss = new();

    public string diningspacename { get; set; }
    public string countername { get; set; }
    protected override async Task OnInitializedAsync()
    {
        dspace = await PosService.GetDiningSpaces();
        billstationsss = await PosService.GetBillStations();

        var firstSpace = dspace.FirstOrDefault();
        var firstbill = billstationsss.FirstOrDefault();

        if (firstSpace != null)
            diningspacename = firstSpace.diningSpaceName ?? "";
        if (firstbill != null)
            countername = firstbill.billStationName ?? "";

        categories = await PosService.GetCategoriesAsync();

        BillItems = await PosService.GetBillItemsAsync();

        dsitemrate = await PosService.GetItemRateAsync();
        parentchildrenitem = await PosService.GetParentChildAsync();


        filteredMainFillItem = BillItems
    .Where(item => item.itemType == 1 || item.itemType == 2)
    .ToList();

        filteredSubFillItem = BillItems
        .Where(item => item.itemType == 1 || item.itemType == 3)
        .ToList();


        filteredSubFillItemlist = filteredSubFillItem;

        // mainitems = await PosService.GetMainItemsAsync();

        // filteredunits = await PosService.GetUnitsAsync();

        var allCategory = new Category { catId = 0, catName = "All" };

        categories.Insert(0, allCategory); // Add to top
        SelectedCategory = allCategory;
        filteredcategories = categories.ToList();

        FilteredItems = Items.ToList();
        Console.WriteLine("loaded!");

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
    }

    void ApplyDiscount()
    {
        DiscountPercent = DiscountPercent == 0 ? 10 : 0; // Toggle for example
    }

    void ApplyLoyalty()
    {
        // Not yet implemented
    }

    public string qrCode { get; set; }
    public bool intermediateTime { get; set; } = true;


    private async void onEnteronItemQuantity(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Code == "Enter")
        {


            var matchedItem = filteredMainFillItem
                .FirstOrDefault(i => i.itemId == selectedItem.itemId);
            if (matchedItem != null)
            {
                if (itemQuantity >= 0)
                {
                    var unitId = selectedUnit?.unitId ?? 0;

                    AddToOrderHeader(matchedItem, itemQuantity??0,unitId);


                    itemQuantity = null;
                    await quantityRef.ResetAsync(); // 👈 this clears the UI value

                    selectedItem = null;
                    await productRef.ResetAsync(); // 👈 this clears the UI value

                    selectedUnit = null;
                    await unitRef.ResetAsync(); // 👈 this clears the UI value


                    StateHasChanged();


                    // Re-focus the field to ensure visual update
                    await Task.Delay(10); // Small delay for render cycle

                    await JS.InvokeVoidAsync("eval", "document.body.setAttribute('tabindex', '0'); document.body.focus();");
                    // await productRef.FocusAsync();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("unknown quanity!!.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("no item found!!.", Severity.Error);
            }
        }
    }



    public int? itemQuantity { get; set; }
    private async Task HandleProductSelected(BillItem mainitemselect)
    {
        if (intermediateTime)
        {
            if (selectedItem?.itemId != mainitemselect?.itemId && mainitemselect != null)
            {
                selectedItem = mainitemselect;

               

                filteredunits = filteredMainFillItem
                    .Where(i => i.itemId == selectedItem.itemId && i.ItemUnits != null)
                    .SelectMany(i => i.ItemUnits!) // Flatten the list
                    .Where(iu => iu.Unit != null) // Avoid null Unit references
                    .Select(iu => iu.Unit)
                    .Distinct()
                    .ToList();

                filteredunits = filteredunits
                                .Where(unit =>
                                {
                                    var child = parentchildrenitem
                                        .FirstOrDefault(x => x.parentItemId == selectedItem.itemId && x.unitId == unit.unitId);

                                    if (child == null)
                                        return false;

                                    var rate = dsitemrate.FirstOrDefault(x =>
                                        x.itemId == child.childItemId &&
                                        x.diningSpaceId == selectedDiningSpace);

                                    return rate != null && rate.itemRate > 0;
                                })
                                .ToList();

                selectedUnit = null;
                StateHasChanged();

                await Task.Delay(100);

                if (!(filteredunits.Any()))
                    await quantityRef.FocusAsync();
                else
                    await unitRef.FocusAsync();
            }
        }
    }
    private async Task HandleUnitSelected(Unit unitselect)
    {
        if (selectedUnit?.unitId != unitselect?.unitId && unitselect != null)
        {
            selectedUnit = unitselect;
            await Task.Delay(100); // Let autocomplete settle
            await quantityRef.FocusAsync(); // 👈 Move to NEXT field
        }
    }
    private MainItem selectedProduct;
    private BillItem selectedItem;
    private Unit selectedUnit;
    private MudAutocomplete<BillItem> productRef;
    private MudAutocomplete<Unit> unitRef;
    private MudTextField<int?> quantityRef;



    private Task<IEnumerable<Unit>> SearchUnits(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Unit>>(filteredunits);

        var result = (filteredunits ?? new List<Unit>())
            .Where(p => p.unitName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }


    private Task<IEnumerable<BillItem>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<BillItem>>(filteredMainFillItem);

        var result = filteredMainFillItem
            .Where(p => p.itemName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }

    private void ClickMe()
    {
        Console.WriteLine("Button clicked!");
    }



    private string _searchText = string.Empty;
    private string _categorySearchText = string.Empty;

    public string _categorySearch
    {
        get => _categorySearchText;
        set
        {
            _categorySearchText = value;
            FilterCategories();
        }
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(_categorySearchText))
        {
            filteredcategories = categories.ToList();
        }
        else
        {
            filteredcategories = categories
                .Where(c => c.catName.Contains(_categorySearchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }




    private void OnSearchChanged(object value)
    {
        _searchText = value.ToString();
        ApplyFilters();
    }

    private void OnCategorySearchChanged(string value)
    {
        _categorySearchText = value;
    }



    private Category SelectedCategory;

    private void SelectCategory(Category category)
    {
        SelectedCategory = category;
        ApplyFilters();
    }



    private void ApplyFilters()
    {
        filteredSubFillItemlist = filteredSubFillItem
        .Where(item =>
            (SelectedCategory.catId == 0 || item.CatId == SelectedCategory.catId) &&
            (string.IsNullOrWhiteSpace(_searchText) ||
                item.itemName.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
        )
        .ToList();
    }


    private void AddToOrderBillItem(BillItem item)
    {
        var existingOrder = new ItemOrder();
        if (item.itemType == 1)
        {
            existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId);
        }
        else if (item.itemType == 3)
        {
            var filtered = parentchildrenitem
                           .Where(x => x.childItemId == item.itemId)
                           .ToList();

            int unitid = filtered.FirstOrDefault()?.unitId ?? 0;
            int parentItemId = filtered.FirstOrDefault()?.parentItemId ?? 0;
            existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == parentItemId);
        }
        if (existingOrder == null)
        {
            if(item.itemType==1)
            {

                decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                OrderedItems.Add(new ItemOrder { ItemId = item.itemId, UnitID = 0, Name = item.itemName, Price = rate, Quantity = 1, Amount = rate });

            }
            else
            {
                var filtered = parentchildrenitem
                           .Where(x => x.childItemId == item.itemId)
                           .ToList();

                int unitid = filtered.FirstOrDefault()?.unitId ?? 0;
                int parentItemId = filtered.FirstOrDefault()?.parentItemId ?? 0;

                decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                OrderedItems.Add(new ItemOrder { ItemId = parentItemId, UnitID = unitid, Name = item.itemName, Price = rate, Quantity = 1, Amount = rate });

            }
            
        }
        else
        {
            existingOrder.Quantity++;
            var itemamount = Math.Round(existingOrder.Quantity * existingOrder.Price, 2);
            existingOrder.Amount = itemamount;
        }

        Snackbar.Clear();
        Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });


        // _=ScrollToBottom();
    }

    private void AddToOrderHeader(BillItem item,int Qty,int unitid)
    {
        var existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId);

        if (existingOrder == null)
        {

            if (item.itemType == 1)
            {

                var filtereddiningspacerate = dsitemrate
                               .Where(x => x.itemId == item.itemId && x.diningSpaceId == selectedDiningSpace)
                               .ToList();
                decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;

                var itemamount = Math.Round(Qty * mainiitemrate, 2);

                if (Qty > 0)
                {
                    OrderedItems.Add(new ItemOrder { ItemId = item.itemId, Name = item.itemName, Price = mainiitemrate, Quantity = Qty, Amount = itemamount,UnitID=0 });
                    Snackbar.Clear();
                    Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
                }
            }
            else
            {

                var filtered = parentchildrenitem
                               .Where(x => x.parentItemId == item.itemId && x.unitId == unitid)
                               .ToList();


                int childItemId = filtered.FirstOrDefault()?.childItemId ?? 0;
                string childItemName = filtered.FirstOrDefault()?.childItemname ?? "";


                var filtereddiningspacerate = dsitemrate
                               .Where(x => x.itemId == childItemId && x.diningSpaceId == selectedDiningSpace)
                               .ToList();

                decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;

                var itemamount = Math.Round(Qty * mainiitemrate, 2);

                if (Qty > 0)
                {
                    OrderedItems.Add(new ItemOrder { ItemId = item.itemId, Name = childItemName, Price = mainiitemrate, Quantity = Qty, Amount = itemamount ,UnitID=unitid});
                    Snackbar.Clear();
                    Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
                }
            }
        }
        else
        {
            if (Qty > 0)
            {
                existingOrder.Quantity = Qty;
                var itemamount = Math.Round(existingOrder.Quantity * existingOrder.Price, 2);
                existingOrder.Amount = itemamount;
            }
            else
            {
                OrderedItems.Remove(existingOrder);
                Snackbar.Clear();
                Snackbar.Add($"{item.itemName} removed from order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
            }
        }
    }


    private void AddItem(ItemOrder addItem)
    {
        addItem.Quantity ++;

        var itemamount = Math.Round(addItem.Quantity * addItem.Price, 2);
        addItem.Amount = itemamount;
    }
    private void MinusItem(ItemOrder minuItem)
    {
        if (minuItem.Quantity != 1)
        {
            minuItem.Quantity--;
            var itemamount = Math.Round(minuItem.Quantity * minuItem.Price, 2);
            minuItem.Amount = itemamount;
        }
        else
            OrderedItems.Remove(minuItem);


    }
    private void DeleteItem(ItemOrder deleteItem)
    {
        OrderedItems.Remove(deleteItem);
    }

    private List<Item> FilteredItems = new();

    private class ItemOrder
    {
        public int ItemId { get; set; }
        public int UnitID { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
    }

    private string ToTitleCase(string input)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }

    async Task ScrollToBottom()
    {
        await Task.Delay(2000); // 2 seconds
        await JS.InvokeVoidAsync("scrollToBottom", "scrollContainer");
    }


   
}



