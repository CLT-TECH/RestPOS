@page "/pos"
@page "/pos/{TableId:int?}"

@inject IKeyboardListenerService KeyboardListener
@implements IDisposable

@inject IDataUploadService UploadService

@using MAUIBLAZORHYBRID.Components.Data
@using MAUIBLAZORHYBRID.Data.DTO
@using MAUIBLAZORHYBRID.Data.Data
@using MAUIBLAZORHYBRID.Services.Sync
@using MAUIBLAZORHYBRID.Services.Upload
@using MudBlazor
@using System.Globalization
@using System.Diagnostics
@inject ISnackbar Snackbar
@layout Components.Layout.FullScreenLayout
@inject PosPageService PosService
@inject IJSRuntime JS
@inject ISyncService SyncService
@inject HttpClient Http
@using System.Text.Json;
@using SharpHook.Data
@inject TaxCalculationService TaxService
@inject AppState appState
@inject KOTBillService KOTService
@inject BackgroundDataService BgService

<div id="focusDiv"></div>

<MudPaper Class="pos-screen">
    <div class="main-layout">
        <!-- First part: 75-80% width -->
        <div class="left-panel">

            <!-- Header part of first part -->
            <div class="header-part">


                <MudGrid >
                    <MudItem  sm="4">
                        <div class="header-details">
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.Countertops" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Counter: <span id="counter"></span>@countername</span>
                            </div>
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.TableRestaurant" Size="Size.Small" Style="color:#3eb489;" />
                                <span>Dining Space: <span id="diningspace">@diningspacename</span></span>
                            </div>
                            <div class="header-detail-item">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Style="color:#3eb489;" />
                                <span> @userName</span>
                            </div>
                        </div>

                    </MudItem>
                    <MudItem  sm="5">
                        <MudAutocomplete T="BillItem"
                        Label="Item"
                        Value="selectedItem"
                        ValueChanged="HandleProductSelected"
                        SearchFunc="SearchProducts"
                        ToStringFunc="(p) => p?.itemName"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        @ref="productRef"
                        Immediate="true"
                        MaxItems="50"
                        >
                            <ItemTemplate>
                                <div>@context.itemName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="2">
                        <MudAutocomplete T="Unit"
                        @ref="unitRef"
                        Label="Unit"
                        Value="selectedUnit"
                        ValueChanged="HandleUnitSelected"
                        SearchFunc="SearchUnits"
                        ToStringFunc="(p) => p?.unitName"
                        Adornment="Adornment.None"
                        Dense="true"
                        ResetValueOnEmptyText="true"
                        Immediate="true" >
                            <ItemTemplate>
                                <div>@context.unitName</div>
                            </ItemTemplate>
                        </MudAutocomplete>


                    </MudItem>
                    <MudItem  sm="1" Style="padding-left:0">
                        <MudTextField Immediate="true" T="int?" @ref="quantityRef" Label="Qty" @bind-Value="itemQuantity" OnKeyUp="onEnteronItemQuantity"></MudTextField>
                    </MudItem>


                </MudGrid>

              


            </div>

            <!-- Body: category list left and item cards right -->
            <div class="body-part">

                <!-- Category list with search box on top -->
                <div class="category-list">
                    <div style="flex:none !important">
                        <MudTextField @bind-Value="_categorySearch" Placeholder="Search categories..."
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" tabindex="-1"
                        Class="category-search" Immediate="true"   />
                    </div>
                    <MudNavMenu Class="category-navmenu">
                        @foreach (var category in filteredcategories)
                        {
                            <MudNavLink 
                            Class="@($"category-link {(category == SelectedCategory ? "selected" : "")}")"
                            OnClick="@(() => SelectCategory(category))">
                                <MudPaper Class="category-card" Elevation="2" Hover="true" >
                                    <MudText Typo="Typo.subtitle1" Class="category-text">@category.catName</MudText>
                                </MudPaper>
                            </MudNavLink>
                        }
                    </MudNavMenu>
                </div>

                <!-- Items container -->
                <div class="items-container">
                   


                    <MudGrid>
                        @foreach (var item in filteredSubFillItemlist)
                        {
                            decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                            if(rate>0)
                            {
                                <MudItem xs="12" sm="6" md="4" lg="3" Style="padding-top:0;padding-bottom:5px!important;padding-left:4px!important">
                                    <MudCard Class="item-card" Elevation="6" Hover="true" @onclick="() => AddToOrderBillItem(item)" tabindex="0">
                                        <div class="item-header">
                                            <div class="item-image-container">
                                                <MudImage Src="images/images.jpg" Alt="@item.itemName" Class="item-image" />
                                            </div>
                                            <MudText Typo="Typo.subtitle2" Class="item-price item-header-price">&#8377;@rate.ToString("F2")</MudText>
                                        </div>
                                        <MudCardContent Style="padding:8px 0px 2px 8px">
                                            <MudText Typo="Typo.subtitle2" GutterBottom="false" Class="item-title" Style="">@ToTitleCase(item.itemName)</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </div>
            </div>

            <!-- Footer with status and time -->
            <div class="footer-part">
                <div class="footer-left">
                    <MudChip T="string" Class="status-chip">Open Orders: 3</MudChip>
                    <MudChip T="string" Class="status-chip">Running: 5</MudChip>
                    <MudChip T="string" Class="status-chip">Billed: 10</MudChip>
                    <MudChip T="string" Class="status-chip">Vacant Tables: 8</MudChip>
                </div>
                <div class="footer-right">
                    <MudText Typo="Typo.subtitle2">@DateTime.Now.ToString("hh:mm tt")</MudText>
                </div>
            </div>
        </div>

        <!-- Second part: ordered items list -->
        <div class="right-panel">
          

            <MudPaper Class="custom-order-list" Elevation="6">

                <div class="custom-order-header-row">
                    <MudText Typo="Typo.h5" Class="custom-order-header">
                        Ordered Items
                    </MudText>

                    <MudTextField 
                    T="string"
                    @bind-Value="qrCode"
                    Placeholder="Item qr code..."
                    Class="custom-order-qrcode" />
                </div>

                <div id="scrollContainer" class="custom-ordered-items-list">
                    <MudList T="string?" SelectionMode="SelectionMode.SingleSelection" 
                        SelectedValueChanged="@((string? item)=>
                        OnSelectedItemChanged(item))" SelectedValue="selectedListItem">
                        @if (OrderedItems == null || !OrderedItems.Any())
                        {
                            <MudText Typo="Typo.body1" Align="Align.Center" Class="custom-empty-order-text">
                                No items ordered yet.
                            </MudText>
                        }
                        else
                        {
                            @foreach (var orderItem in OrderedItems.AsEnumerable().Reverse())
                            {
                                <MudListItem id="@($"listItem{orderItem.ItemId}{orderItem.UnitID}")" Value="orderItem?.Name" Class="@GetItemClass(orderItem)" @onkeydown="(e) => HandleKeyDown(e, orderItem)" @onfocus="(e) => HandleFocusListItem(e, orderItem.Name)">

                                    <MudText Class="custom-order-line1"  Align="Align.Left">@ToTitleCase(orderItem.Name)</MudText>

                                    <div class="custom-order-line2">
                                        <div class="order-controls">
                                            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" tabindex="-1"
                                                           Style="color:#3eb489"
                                            Size="Size.Small"
                                            Variant="Variant.Text"
                                            OnClick="@(() => AddItem(orderItem))" />

                                            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" tabindex="-1"
                                                           Style="color:#3eb489"
                                            Size="Size.Small"
                                            Variant="Variant.Text"
                                            OnClick="@(() => MinusItem(orderItem))" />
                                        </div>
                                        ₹@orderItem.Price.ToString("F2") x @orderItem.Quantity
                                        <span class="custom-order-total">= <span>₹@orderItem.Amount.ToString("F2")</span></span>
                                    </div>



                                    <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline" tabindex="-1"
                                                   Class="delete-button-inside"
                                    Color="Color.Error"
                                    Size="Size.Small"
                                    Variant="Variant.Text"
                                    OnClick="@(() => DeleteItem(orderItem))" />
                                </MudListItem>
                            }
                        }
                    </MudList>
                </div>
                <MudCard Class="custom-order-footer" >
                    <MudCardContent Class="pa-0" Style="width:100%">

                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary">Cash</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Secondary">Card</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Info">Wallet</MudChip>
                        <div class="row-between">
                            <div class="left-content">
                                <!-- Line 1: Total + Icons -->
                                <div class="summary-line summary-header">
                                    <MudText Typo="Typo.subtitle1" Class="label">Total:</MudText>
                                    <MudText Typo="Typo.subtitle1" Class="value">₹@bill.ItemTotal.ToString("F2")</MudText>

                                    <MudIconButton Disabled Icon="@Icons.Material.Filled.LocalOffer"
                                    Color="Color.Primary"
                                    Size="Size.Small"
                                    OnClick="ApplyDiscount" />

                                    <MudIconButton Icon="@Icons.Material.Filled.EmojiEmotions"
                                    Color="Color.Secondary"
                                    Size="Size.Small"
                                    OnClick="ApplyLoyalty" />
                                </div>

                                <!-- Discount Line -->
                                @if (DiscountPercent > 0)
                                {
                                    <div class="summary-line">
                                        <MudText Typo="Typo.body2" Class="label">Discount:</MudText>
                                        <MudText Typo="Typo.body2" Class="value">@DiscountPercent% - ₹@DiscountAmount.ToString("F2")</MudText>
                                    </div>

                                    <div class="summary-line">
                                        <MudText Typo="Typo.body2" Class="label">Subtotal:</MudText>
                                        <MudText Typo="Typo.body2" Class="value">₹@SubTotal.ToString("F2")</MudText>
                                    </div>
                                }

                                <!-- Tax Line -->
                                <div class="summary-line"  >
                                    <MudText Typo="Typo.body2" Class="label">Tax :</MudText>
                                    <MudText Typo="Typo.body2" Class="value">₹@bill.TaxTotal.ToString("F2")</MudText>
                                </div>


                                <!-- Grand Total -->
                                <div class="summary-line summary-total">
                                    <MudText Typo="Typo.h6" Class="label">Grand Total:</MudText>
                                    <MudText Typo="Typo.h6" Class="value">₹@bill.TotalAmount.ToString("F2")</MudText>
                                </div>
                            </div>
                            <div class="right-content">
                                <MudButton Variant="Variant.Filled"
                                Color="Color.Success"
                                StartIcon="@Icons.Material.Filled.Save"
                                Class="summary-action-button" OnClick="HandleSave">
                                </MudButton>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        </div>
    </div>
</MudPaper>

@if (isLoading)
{
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.4); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <MudProgressCircular Color="Color.Primary"   Indeterminate="true" />
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">Saving....</MudText>
        </div>
    </div>
}
@code {
    [Parameter]
    public int TableId { get; set; }
    private KOTBillDTO kotInitData = new();


    public int billType { get; set; } = 0;
    public string billNotes { get; set; } = "generated from pospage";

    private bool isLoading = false;

    public sealed class SaveBillResponse
    {
        public string? Message { get; init; }
    }

    private BillMasterDTO newbillmaster = new();
    private HotBillItemDetailDTO detail = new();


    [Inject] IHotBillSaveService BillService { get; set; }

    private async Task HandleSave()
    {

        if (isLoading) return;
        BgService.StopBackgroundTasks();
        try
        {

            isLoading = true;
            await Task.Delay(250);

            if (!OrderedItems.Any())
            {
                Snackbar.Add("Nothing to order", Severity.Error);
                return;
            }

            var billMaster = new HotBillMaster
            {
                HotBillType = billType,
                HotBillPrefix = "",
                HotBillDate = DateTime.UtcNow.Date,
                HotBillTime = DateTime.UtcNow,
                BearerId = appState.BearerId, 
                HotBillItemTotal = bill.ItemTotal,
                HotBillTaxTotal = bill.TaxTotal,
                B4roundAmt = bill.TotalAmount,
                HotBillNeTAmt = bill.TotalAmount,
                HotBillNotes = billNotes,
                AppMachineId = appState.MachineId, 
                BranchId = appState.BranchId, 
                DiningSpaceId = selectedDiningSpace,
                EnteredEmpId = appState.LoggedInUserId, 
                CounterId = appState.CounterId,
                CustomerMobile = string.Empty, // Optional
                IsSynced = false,
                HotBillItemDetails = OrderedItems.Select(item => new HotBillItemDetail
                {
                    ItemId = item.ItemId,
                    BarCode =   string.Empty,
                    Qty = item.Quantity,
                    UnitId = item.UnitID,
                    DetRate = item.Price,
                    DetAmt = item.Amount,
                    DetDiscPer = 0m, // Add if you have discounts
                    DetDiscAmt = 0m,
                    DetGrossAmt = item.Amount,
                    DetTaxPer = 0m, // Your logic
                    DetTaxAmt = 0m, // Your logic
                    DetNetAmt = item.Amount
                }).ToList(),
                HotBillTaxDetails = bill.TaxDetails.Select(tax => new HotBillTaxDetail
                {
                    TaXId = tax.TaxId,
                    TaxableAmt = tax.TaxableAmount,
                    TaxPer = tax.TaxPer,
                    TaxAmt = tax.TaxAmount
                }).ToList(),
                HotBillAgainstKots=kotInitData.Orders?.Select(kotorder=> new HotBillAgainstKot
                {
                    HotKotId=kotorder.KOTId
                }).ToList() ?? new ()
            };


            // Save
            var result = await BillService.SaveHotBillAsync(billMaster);

            if (result.IsSuccess)
            {
                Snackbar.Add("Bill generated successfully!", Severity.Success);
                ResetData();

                _= UploadService.UploadPendingDataAsync();
            }
            else
            {
                Snackbar.Add($"Error: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
            // Log detailed error if needed
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
            BgService.StartBackgroundTasks();

        }
    }


    private void ResetData()
    {
        OrderedItems = new();
        kotInitData = new();
        TableId = new();
        billType = 0;
        Recalculate();
        InvokeAsync(StateHasChanged);
    }

    public int selectedDiningSpace { get; set; } = 1;
    decimal TotalAmount => OrderedItems.Sum(x => x.Amount);
    decimal DiscountPercent { get; set; } = 0;
    decimal DiscountAmount => TotalAmount * DiscountPercent / 100;
    decimal SubTotal => TotalAmount - DiscountAmount;
    decimal TaxPercent => 0;
    decimal TaxAmount => (DiscountPercent > 0 ? SubTotal : TotalAmount) * TaxPercent / 100;
    decimal GrandTotal => (DiscountPercent > 0 ? SubTotal : TotalAmount) + TaxAmount;

    private List<Category> categories = new();
    private List<Category> filteredcategories = new();
    private List<Item> Items = new();
    private List<BillItem> BillItems = new();
    private List<MainItem> mainitems = new();
    private List<Unit> filteredunits = new();



    private List<ItemOrder> OrderedItems = new List<ItemOrder>();


    private BillTotalDTO bill = new BillTotalDTO();

    private void Recalculate()
    {
        bill = TaxService.CalculateBill(OrderedItems, taxconfig.TaxSettings);
    }


    private List<BillItem> filteredMainFillItem = new();
    private List<BillItem> filteredSubFillItem = new();
    private List<BillItem> filteredSubFillItemlist = new();
    private List<VWItemParentChild> parentchildrenitem = new();
    private List<DiningSpaceItemRate> dsitemrate = new();
    private List<DiningSpace> dspace = new();
    private List<BillStation> billstationsss = new();
    private TaxConfigurationDTO taxconfig = new();

    public string diningspacename { get; set; }
    public string countername { get; set; }
    public string userName { get; set; } 


    private string lastKey = "";
    private string combo = "";
    private string barcode = "";
    private List<Services.Interfaces.KeyboardEventData> keyEvents = new();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            userName = await SecureStorage.GetAsync("AppUsername") ?? "";
            var counterid = await SecureStorage.GetAsync("AppUsername") ?? "";




            dspace = await PosService.GetDiningSpaces();
            billstationsss = await PosService.GetBillStations();

            var firstbill = billstationsss.FirstOrDefault(d => d.billStationId == appState.CounterId);
            if (firstbill != null)
                countername = firstbill.billStationName ?? "";

            var firstSpace = dspace.FirstOrDefault();

            if (firstSpace != null)
                diningspacename = firstSpace.diningSpaceName ?? "";



            categories = await PosService.GetCategoriesAsync();

            BillItems = await PosService.GetBillItemsAsync();

            dsitemrate = await PosService.GetItemRateAsync();

            parentchildrenitem = await PosService.GetParentChildAsync();

            taxconfig = await PosService.GetTaxConfigurationAsync();


            filteredMainFillItem = BillItems
            .Where(item => item.itemType == 1 || item.itemType == 2)
            .ToList();

            filteredSubFillItem = BillItems
            .Where(item => item.itemType == 1 || item.itemType == 3)
            .ToList();


            filteredSubFillItemlist = filteredSubFillItem;


            var allCategory = new Category { catId = 0, catName = "All" };
            categories.Insert(0, allCategory); // Add to top
            SelectedCategory = allCategory;
            filteredcategories = categories.ToList();

            FilteredItems = Items.ToList();

            if (TableId > 0)
            {
                billType = 1;

                var result = await KOTService.GetKOTDetailsByTable(TableId);

                if (result.IsSuccess)
                {
                    kotInitData = result.Data ?? new KOTBillDTO();

                    if(kotInitData.DiningSpaces!=null)
                    {
                        selectedDiningSpace = kotInitData.DiningSpaces.diningSpaceId;
                        diningspacename = kotInitData.DiningSpaces.diningSpaceName;
                    }
                    else
                    {
                        selectedDiningSpace = 0;
                        diningspacename = "";
                    }

                    foreach(var order in kotInitData.Orders)
                    {
                        foreach(var item in order.Items)
                        {
                            int itemid = item.ItemId;
                            int unitid = item.UnitId;
                            var itemname = item.ItemName;
                            int qty = Convert.ToInt16(item.Quantity);

                            var existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == itemid && o.UnitID==unitid);

                            if(existingOrder==null)
                            {
                                if (unitid > 0)
                                {
                                    var filtered = parentchildrenitem
                               .Where(x => x.parentItemId == itemid && x.unitId == unitid)
                               .ToList();


                                    int childItemId = filtered.FirstOrDefault()?.childItemId ?? 0;
                                    int itemType = filtered.FirstOrDefault()?.itemtype ?? 0;
                                    string childItemName = filtered.FirstOrDefault()?.childItemname ?? "";


                                    var filtereddiningspacerate = dsitemrate
                                                   .Where(x => x.itemId == childItemId && x.diningSpaceId == selectedDiningSpace)
                                                   .ToList();

                                    decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;

                                    OrderedItems.Add(new ItemOrder { ItemId = itemid, Name = itemname, Price = mainiitemrate, Quantity = qty, UnitID = unitid, ItemType = 2 });
                                    selectedListItem = "";
                                }
                                else
                                {
                                    var filtereddiningspacerate = dsitemrate
                                      .Where(x => x.itemId == itemid && x.diningSpaceId == selectedDiningSpace)
                                      .ToList();
                                    decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;

                                    OrderedItems.Add(new ItemOrder { ItemId = itemid, Name = itemname, Price = mainiitemrate, Quantity = qty, UnitID = 0, ItemType = 1 });
                                    selectedListItem = "";

                                }
                            }
                            else
                            {
                                existingOrder.Quantity += qty;
                            }
                        }
                    }
                    Recalculate();
                }
                else
                {
                    Snackbar.Add("KOT retrieve failed", Severity.Error);
                    Console.WriteLine($"KOT retrieve failed: {result.ErrorMessage}");
                }
            }




            Console.WriteLine("loaded!");






            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;



            await InitializeKeyboardListener();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialisatiion failed: {ex.Message}");
        }
        isLoading = false;
    }

    private IDisposable? _keyEventSubscription;
    private IDisposable? _barcodeSubscription;
    private async Task InitializeKeyboardListener()
    {
        KeyboardListener.StartListening();

        _keyEventSubscription=KeyboardListener.KeyEvents.Subscribe(async evt =>
        {
            lastKey = evt.KeyName;
            keyEvents.Insert(0, evt);
            combo = DetectCombo(evt);

            switch (combo)
            {
                case "Ctrl + S":
                    Debug.WriteLine("Saved");
                    break;
                case "F1":
                    await HandleSave();
                    break;
                case "F11":
                    ResetData();
                    break;
                case "F4":
                    await HandleF4Key();
                    break;
                default:
                    Debug.WriteLine("Everything else");
                    break;
            }

            // Call StateHasChanged if needed for UI updates
        });

        _barcodeSubscription = KeyboardListener.BarcodeStream.Subscribe(code =>
        {
            barcode = code;
            AddBarCodeItem(barcode);
            InvokeAsync(StateHasChanged);
        });
        await InvokeAsync(StateHasChanged);

    }

    void ApplyDiscount()
    {
        DiscountPercent = DiscountPercent == 0 ? 10 : 0; // Toggle for example
    }

    void ApplyLoyalty()
    {
        // Not yet implemented
    }


    int focusStage = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (selectedProduct == null)
                await productRef.FocusAsync();
        }
        else
        {
            if (focusStage == 1)
            {
                itemQuantity = null;

                await productRef.FocusAsync();
            }
            else if (focusStage == 2)
            {
                await unitRef.FocusAsync();
            }
            else if (focusStage == 3)
            {
                await quantityRef.FocusAsync();
            }
            else if (focusIdString!="")
            {
                await JS.InvokeVoidAsync("focusElementById", focusIdString);
                focusIdString = "";
            }

            focusStage = 0;

        }
    }


    public string qrCode { get; set; }
    public bool intermediateTime { get; set; } = true;


    private async void onEnteronItemQuantity(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Code == "Enter")
        {

            var matchedItem = filteredMainFillItem
                .FirstOrDefault(i => i.itemId == selectedItem.itemId);
            if (matchedItem != null)
            {
                if (matchedItem.itemType == 2 && selectedUnit==null)
                {
                    Snackbar.Clear();
                    Snackbar.Add("unit not selected!!.", Severity.Error);
                }
                else if (itemQuantity >= 0)
                {
                    var unitId = selectedUnit?.unitId ?? 0;

                    AddToOrderHeader(matchedItem, itemQuantity??0,unitId);


                    itemQuantity = null;
                    await quantityRef.ResetAsync();

                    selectedItem = null;

                    selectedUnit = null;


                    focusStage = 1;

                    StateHasChanged();


                    // Re-focus the field to ensure visual update



                    // await productRef.FocusAsync();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("unknown quanity!!.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("no item found!!.", Severity.Error);
            }
        }
    }



    public int? itemQuantity { get; set; }
    private async Task HandleProductSelected(BillItem mainitemselect)
    {

        selectedListItem = "";

        if (intermediateTime)
        {
            if (selectedItem?.itemId != mainitemselect?.itemId && mainitemselect != null)
            {
                selectedItem = mainitemselect;



                filteredunits = filteredMainFillItem
                    .Where(i => i.itemId == selectedItem.itemId && i.ItemUnits != null)
                    .SelectMany(i => i.ItemUnits!) // Flatten the list
                    .Where(iu => iu.Unit != null) // Avoid null Unit references
                    .Select(iu => iu.Unit)
                    .Distinct()
                    .ToList();

                filteredunits = filteredunits
                                .Where(unit =>
                                {
                                    var child = parentchildrenitem
                                        .FirstOrDefault(x => x.parentItemId == selectedItem.itemId && x.unitId == unit.unitId);

                                    if (child == null)
                                        return false;

                                    var rate = dsitemrate.FirstOrDefault(x =>
                                        x.itemId == child.childItemId &&
                                        x.diningSpaceId == selectedDiningSpace);

                                    return rate != null && rate.itemRate > 0;
                                })
                                .ToList();

                selectedUnit = null;
                itemQuantity = null;


                if (selectedItem.itemType == 1)
                    focusStage = 3;
                else
                    focusStage = 2;


            }
        }
    }
    private async Task HandleUnitSelected(Unit unitselect)
    {
        selectedListItem = "";

        if (selectedUnit?.unitId != unitselect?.unitId && unitselect != null)
        {
            selectedUnit = unitselect;
            focusStage = 3;
        }
    }

    private MainItem selectedProduct;
    private BillItem selectedItem;
    private Unit selectedUnit;
    private MudAutocomplete<BillItem> productRef;
    private MudAutocomplete<Unit> unitRef;
    private MudTextField<int?> quantityRef;



    private Task<IEnumerable<Unit>> SearchUnits(string value, CancellationToken token)
    {
        selectedListItem = "";

        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Unit>>(filteredunits);

        var result = (filteredunits ?? new List<Unit>())
            .Where(p => p.unitName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }


    private Task<IEnumerable<BillItem>> SearchProducts(string value, CancellationToken token)
    {
        selectedListItem = "";

        var rateOnlyItems = filteredMainFillItem
        .Where(item =>
        {
            decimal rate = 0m;

            if (item.itemType == 1)
            {
                rate = dsitemrate
                    .FirstOrDefault(x => x.itemId == item.itemId && x.diningSpaceId == selectedDiningSpace)
                    ?.itemRate ?? 0m;
            }
            else if (item.itemType == 2)
            {
                var children = parentchildrenitem
                        .Where(x => x.parentItemId == item.itemId)
                        .ToList();
                if (children.Any())
                {
                    // Check if any child has a rate > 0
                    rate = children
                        .Select(child =>
                            dsitemrate.FirstOrDefault(x => x.itemId == child.childItemId && x.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m
                        )
                        .FirstOrDefault(r => r > 0m);
                }
            }

            return rate > 0;
        });

        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<BillItem>>(rateOnlyItems);

        var result = rateOnlyItems
            .Where(p => p.itemName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(result);
    }

    private void ClickMe()
    {
        Console.WriteLine("Button clicked!");
    }



    private string _searchText = string.Empty;
    private string _categorySearchText = string.Empty;

    public string _categorySearch
    {
        get => _categorySearchText;
        set
        {
            _categorySearchText = value;
            FilterCategories();
        }
    }

    private void FilterCategories()
    {
        selectedListItem = "";

        if (string.IsNullOrWhiteSpace(_categorySearchText))
        {
            filteredcategories = categories.ToList();
        }
        else
        {
            filteredcategories = categories
                .Where(c => c.catName.Contains(_categorySearchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }




    private void OnSearchChanged(object value)
    {
        _searchText = value.ToString();
        ApplyFilters();
    }

    private void OnCategorySearchChanged(string value)
    {
        _categorySearchText = value;
    }



    private Category SelectedCategory;

    private void SelectCategory(Category category)
    {
        SelectedCategory = category;
        ApplyFilters();
    }



    private void ApplyFilters()
    {
        filteredSubFillItemlist = filteredSubFillItem
        .Where(item =>
            (SelectedCategory.catId == 0 || item.CatId == SelectedCategory.catId) &&
            (string.IsNullOrWhiteSpace(_searchText) ||
                item.itemName.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
        )
        .ToList();
    }


    private void AddToOrderBillItem(BillItem item)
    {
        var existingOrder = new ItemOrder();
        if (item.itemType == 1)
        {
            existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId);
        }
        else if (item.itemType == 3)
        {
            var filtered = parentchildrenitem
                           .Where(x => x.childItemId == item.itemId)
                           .ToList();

            int unitid = filtered.FirstOrDefault()?.unitId ?? 0;
            int parentItemId = filtered.FirstOrDefault()?.parentItemId ?? 0;
            existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == parentItemId && o.UnitID == unitid);
        }
        if (existingOrder == null)
        {
            if(item.itemType==1)
            {

                decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                OrderedItems.Add(new ItemOrder { ItemId = item.itemId, UnitID = 0, Name = item.itemName, Price = rate, Quantity = 1, ItemType=item.itemType});
                selectedListItem = "";

            }
            else
            {
                var filtered = parentchildrenitem
                           .Where(x => x.childItemId == item.itemId)
                           .ToList();

                int unitid = filtered.FirstOrDefault()?.unitId ?? 0;
                int parentItemId = filtered.FirstOrDefault()?.parentItemId ?? 0;
                int itemType = filtered.FirstOrDefault()?.itemtype ?? 0;

                decimal rate = item.DiningSpaceItemRates.FirstOrDefault(r => r.diningSpaceId == selectedDiningSpace)?.itemRate ?? 0m;

                OrderedItems.Add(new ItemOrder { ItemId = parentItemId, UnitID = unitid, Name = item.itemName, Price = rate, Quantity = 1,  ItemType = itemType });
                selectedListItem = "";

            }

        }
        else
        {
            existingOrder.Quantity++;
        }

        Snackbar.Clear();
        Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });


        Recalculate();
    }

    private void AddToOrderHeader(BillItem item,int Qty,int unitid)
    {

        var existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId);

        if(unitid>0)
            existingOrder = OrderedItems.FirstOrDefault(o => o.ItemId == item.itemId && o.UnitID==unitid);


        if (existingOrder == null)
        {

            if (item.itemType == 1)
            {

                var filtereddiningspacerate = dsitemrate
                               .Where(x => x.itemId == item.itemId && x.diningSpaceId == selectedDiningSpace)
                               .ToList();
                decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;


                if (Qty > 0)
                {
                    OrderedItems.Add(new ItemOrder { ItemId = item.itemId, Name = item.itemName, Price = mainiitemrate, Quantity = Qty, UnitID = 0, ItemType = item.itemType });
                    selectedListItem = "";

                    Snackbar.Clear();
                    Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
                }
            }
            else if(unitid>0)
            {

                var filtered = parentchildrenitem
                               .Where(x => x.parentItemId == item.itemId && x.unitId == unitid)
                               .ToList();


                int childItemId = filtered.FirstOrDefault()?.childItemId ?? 0;
                int itemType = filtered.FirstOrDefault()?.itemtype ?? 0;
                string childItemName = filtered.FirstOrDefault()?.childItemname ?? "";


                var filtereddiningspacerate = dsitemrate
                               .Where(x => x.itemId == childItemId && x.diningSpaceId == selectedDiningSpace)
                               .ToList();

                decimal mainiitemrate = filtereddiningspacerate?.FirstOrDefault()?.itemRate ?? 0m;



                if (Qty > 0)
                {
                    OrderedItems.Add(new ItemOrder { ItemId = item.itemId, Name = childItemName, Price = mainiitemrate, Quantity = Qty, UnitID=unitid,ItemType=itemType});

                    selectedListItem = "";

                    Snackbar.Clear();
                    Snackbar.Add($"{item.itemName} added to order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
                }
            }
        }
        else
        {
            if (Qty > 0)
            {
                existingOrder.Quantity = Qty;
            }
            else
            {
                OrderedItems.Remove(existingOrder);

                selectedListItem = "";

                Snackbar.Clear();
                Snackbar.Add($"{item.itemName} removed from order.", Severity.Success, config => { config.VisibleStateDuration = 1000; config.ShowCloseIcon = false; });
            }
        }
        Recalculate();
    }


    private void AddItem(ItemOrder addItem)
    {

        selectedListItem = addItem.Name;

        addItem.Quantity ++;
        Recalculate();

    }
    private void MinusItem(ItemOrder minuItem)
    {
        if (minuItem.Quantity != 1)
        {
            minuItem.Quantity--;
            selectedListItem = minuItem.Name;
        }
        else
        {
            OrderedItems.Remove(minuItem);
            selectedListItem = "";

        }
        Recalculate();
    }
    private async Task DeleteItem(ItemOrder deleteItem)
    {

        var focusedId = await JS.InvokeAsync<string>("getFocusedElementId");
        await JS.InvokeVoidAsync("removeFocus", focusedId);
        selectedListItem = "";


        int currentIndex = OrderedItems.IndexOf(deleteItem);
        OrderedItems.Remove(deleteItem);



        var nextItem = currentIndex < OrderedItems.Count
            ? OrderedItems[currentIndex]
            : null;

        var previousItem = currentIndex > 0
            ? OrderedItems[currentIndex - 1]
            : null;

        if(previousItem!=null)
        {
            var id = $"listItem{previousItem.ItemId}{previousItem?.UnitID:0}";
            focusIdString = id;
        }
        else if(nextItem!=null)
        {
            var id = $"listItem{nextItem.ItemId}{nextItem?.UnitID:0}";
            focusIdString = id;
        }
        else
        {
            focusStage = 1;
        }


        Recalculate();

        await InvokeAsync(StateHasChanged);
    }

    private List<Item> FilteredItems = new();



    private string ToTitleCase(string input)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }

    async Task ScrollToBottom()
    {
        await Task.Delay(2000); // 2 seconds
        await JS.InvokeVoidAsync("scrollToBottom", "scrollContainer");
    }

    public List<TaxCalculationResult> CalculateTaxes(List<ItemOrder> itemOrders, List<BranchTaxSettingsDTO> taxSettings)
    {
        var taxResults = itemOrders
            .GroupBy(item => item.ItemType)
            .Select(group =>
            {
                int itemType = group.Key;
                decimal totalAmount = group.Sum(item => item.Amount);

                var taxDetails = taxSettings
                    .Where(t => t.ItemType == itemType)
                    .Select(tax => new TaxDetail
                    {
                        TaxId = tax.TaxId,
                        TaxPer = tax.TaxPer,
                        TaxAmount = (totalAmount * tax.TaxPer) / 100
                    })
                    .ToList();

                return new TaxCalculationResult
                {
                    ItemType = itemType,
                    TotalAmount = totalAmount,
                    TaxDetails = taxDetails
                };
            })
            .ToList();

        return taxResults;
    }



    public class TaxDetail
    {
        public int TaxId { get; set; }
        public decimal TaxPer { get; set; }
        public decimal TaxAmount { get; set; }
    }

    public class TaxCalculationResult
    {
        public int ItemType { get; set; }
        public decimal TotalAmount { get; set; }
        public decimal TotalTax => TaxDetails.Sum(t => t.TaxAmount);
        public List<TaxDetail> TaxDetails { get; set; } = new();
    }

    private string DetectCombo(Services.Interfaces.KeyboardEventData evt)
    {
        if (evt.EventType != EventType.KeyPressed) return "";

        return evt.KeyCode switch
        {
            KeyCode.VcF1 => "F1",
            KeyCode.VcF2 => "F2",
            KeyCode.VcF3 => "F3",
            KeyCode.VcF4 => "F4",
            KeyCode.VcF5 => "F5",
            KeyCode.VcF6 => "F6",
            KeyCode.VcF7 => "F7",
            KeyCode.VcF8 => "F8",
            KeyCode.VcF9 => "F9",
            KeyCode.VcF10 => "F10",
            KeyCode.VcF11 => "F11",
            KeyCode.VcF12 => "F12",
            KeyCode.VcS when evt.IsCtrlPressed => "Ctrl + S",
            KeyCode.VcEnter when evt.IsCtrlPressed => "Ctrl + Enter",
            KeyCode.VcDelete when evt.IsCtrlPressed => "Ctrl + Delete",
            KeyCode.VcTab when evt.IsCtrlPressed => "TabOrderAndItem",
            KeyCode.VcEquals => "+",
            KeyCode.VcMinus => "-",
            _ => ""
        };
    }

    public string? selectedListItem { get; set; }


    private async Task OnSelectedItemChanged(string? item)
    {
        selectedListItem = item; // Update the bound variable
        Console.WriteLine($"Selected: {item}"); // Example action
        await Task.CompletedTask; // Explicit async return
    }

    public string focusIdString { get; set; }

    async Task HandleKeyDown(KeyboardEventArgs args,ItemOrder order)
    {
        if (order != null && selectedListItem=="")
        {
            selectedListItem = order.Name;
            return;
        }
        else if (order.Name != selectedListItem)
        {
            selectedListItem = order.Name;
            return;
        }

        int currentIndex = OrderedItems.IndexOf(order);

        var nextItem = currentIndex < OrderedItems.Count - 1
            ? OrderedItems[currentIndex + 1]
            : null;

        var previousItem = currentIndex > 0
            ? OrderedItems[currentIndex - 1]
            : null;
        if (args.Key == "Delete")
        {
            DeleteItem(order);
        }
        else if (args.Key == "+")
        {
            AddItem(order);
        }
        else if (args.Key == "-")
        {
            if (order.Quantity>1)
                MinusItem(order);
            else
                DeleteItem(order);
        }
        else if (args.Key == "ArrowDown")
        {
            if (previousItem!=null)
            {
                var id = $"listItem{previousItem.ItemId}{previousItem?.UnitID:0}";
                await JS.InvokeVoidAsync("focusElementById", id);

            }
        }
        else if (args.Key == "ArrowUp")
        {
            if (nextItem != null)
            {
                var id = $"listItem{nextItem.ItemId}{nextItem?.UnitID:0}";
                await JS.InvokeVoidAsync("focusElementById", id);
            }
        }


        await InvokeAsync(StateHasChanged);
    }

    void HandleFocusListItem(FocusEventArgs e, string? item)
    {
        selectedListItem = item; // Update the bound variable
    }

    



    private async Task HandleF4Key()
    {
        selectedItem = null;
        selectedUnit = null;
        _ = productRef?.CloseMenuAsync();

        var focusedId = await JS.InvokeAsync<string>("getFocusedElementId");
        await JS.InvokeVoidAsync("removeFocus", focusedId);

        if (selectedListItem == "" && OrderedItems.Any())
        {
            var itemId = OrderedItems.LastOrDefault();

            selectedListItem = itemId.Name;
            if (itemId != null)
                focusIdString = "listItem" + itemId.ItemId + itemId.UnitID;
        }
        else
        {
            selectedListItem = "";
            focusStage = 1;
        }
        await InvokeAsync(StateHasChanged);
    }

    private string GetItemClass(ItemOrder item)
    {
        return item.Name == selectedListItem
            ? "custom-ordered-list-item custom-ordered-list-item-selected"
            : "custom-ordered-list-item";
    }


    private void AddBarCodeItem(string barCode)
    {
        
        var filtered = parentchildrenitem
                             .Where(x => x.BarCode.ToLower() == barCode.ToLower())
                           .ToList();

        int childItemId = filtered.FirstOrDefault()?.childItemId ?? 0;


        if (childItemId>0 )
        {
            var filteredbillitem = BillItems
                            .Where(item => item.itemId == childItemId)
                            .ToList();

            var baritem = filteredbillitem.FirstOrDefault();

            if (baritem != null)
                AddToOrderBillItem(baritem);
        }
    }

    public void Dispose()
    {
        KeyboardListener.StopListening();
        _keyEventSubscription?.Dispose();
        _barcodeSubscription?.Dispose();
    }
}



