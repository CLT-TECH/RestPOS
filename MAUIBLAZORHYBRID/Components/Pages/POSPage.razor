@page "/pos"
@layout Components.Layout.FullScreenLayout

@using System.Collections.Generic

<div class="pos-app">
    <nav class="side-menu">
        <div class="menu-header">
            <h2>POS Menu</h2>
        </div>
        <ul class="menu-list">
            @foreach (var menuItem in SideMenuItems)
            {
                <li>@menuItem</li>
            }
        </ul>
    </nav>

    <main class="center-screen">
        <header class="center-header">
            <div class="item-search">
                <input type="text" placeholder="Search items..." @bind="searchText" @bind:event="oninput" />
            </div>
            <div class="header-spaces">
                <span>Dining Space</span>
                <span>Billing Space</span>
                <span>Cashier</span>
            </div>
        </header>

        <div class="center-content">
            <section class="category-section">
                <div class="category-search">
                    <input type="text" placeholder="Search categories..." @bind="categorySearchText" @bind:event="oninput" />
                </div>
                <div class="category-tiles">
                    @foreach (var cat in FilteredCategories)
                    {
                        <div class="category-tile">@cat.Name</div>
                    }
                </div>
            </section>

            <section class="items-section">
                <div class="items-grid">
                    @foreach (var item in FilteredItems)
                    {
                        <div class="item-card">
                            <img src="@item.ImageUrl" alt="@item.Name" />
                            <div class="item-label">@item.Name</div>
                        </div>
                    }
                </div>
            </section>
        </div>

        <footer class="center-footer">
            @foreach (var opt in FooterOptions)
            {
                <button class="footer-btn">@opt</button>
            }
        </footer>
    </main>

    <aside class="order-side">
        <header class="order-header">
            <h3>Order Items</h3>
        </header>
        <ul class="order-list">
            @foreach (var orderItem in OrderPlacedItems)
            {
                <li>@orderItem.Name <span class="qty">x@orderItem.Quantity</span></li>
            }
        </ul>
    </aside>
</div>

<style>
    /* Root and basic layout */
    .pos-app {
        display: flex;
        height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #1e1e1e;
        color: #f0f0f0;
    }

    /* Side menu */
    .side-menu {
        width: 220px;
        background-color: #2c2c2c;
        overflow-y: auto;
        padding: 10px;
        box-shadow: 2px 0 5px rgba(0,0,0,0.7);
        display: flex;
        flex-direction: column;
    }

    .menu-header h2 {
        margin: 10px 0 20px 10px;
        font-weight: 700;
        color: #ffd700;
        letter-spacing: 1px;
        user-select: none;
    }

    .side-menu .menu-list {
        list-style: none;
        padding: 0;
        margin: 0;
        flex-grow: 1;
    }

    .side-menu .menu-list li {
        padding: 12px 15px;
        margin-bottom: 8px;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        user-select: none;
    }

    .side-menu .menu-list li:hover {
        background-color: #ffd700;
        color: #000;
        font-weight: 600;
    }

    /* Center screen */
    .center-screen {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #252525;
        padding: 12px;
        box-shadow: inset 0 0 10px #00000099;
        overflow: hidden;
    }

    /* Header top in center screen */
    .center-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .item-search input[type="text"] {
        width: 250px;
        padding: 8px 12px;
        border-radius: 6px;
        border: none;
        outline: none;
        font-size: 1rem;
        background-color: #1a1a1a;
        color: #f0f0f0;
        box-shadow: inset 0 0 6px #000;
        transition: box-shadow 0.15s ease;
    }

    .item-search input[type="text"]:focus {
        box-shadow: 0 0 8px 2px #ffd700;
    }

    .header-spaces {
        display: flex;
        gap: 20px;
        font-weight: 600;
        font-size: 1.1rem;
        color: #ffd700;
        user-select: none;
    }

    /* Center content - Categories + Items */
    .center-content {
        display: flex;
        flex-grow: 1;
        overflow: hidden;
    }

    /* Category section left in center content */
    .category-section {
        flex-basis: 280px;
        background-color: #2a2a2a;
        margin-right: 12px;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        padding: 10px;
    }

    .category-search input[type="text"] {
        width: 100%;
        padding: 6px 10px;
        margin-bottom: 8px;
        border-radius: 6px;
        border: none;
        outline: none;
        font-size: 0.95rem;
        background-color: #1a1a1a;
        color: #f0f0f0;
        box-shadow: inset 0 0 5px #000;
        transition: box-shadow 0.15s ease;
    }

    .category-search input[type="text"]:focus {
        box-shadow: 0 0 6px 2px #ffd700;
    }

    .category-tiles {
        flex-grow: 1;
        overflow-y: auto;
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .category-tile {
        background-color: #444;
        color: #ffd700;
        padding: 14px 12px;
        border-radius: 8px;
        user-select: none;
        text-align: center;
        font-weight: 600;
        flex-basis: calc(50% - 8px);
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .category-tile:hover {
        background-color: #ffd700;
        color: #000;
    }

    /* Items section center content - images with label */
    .items-section {
        flex-grow: 1;
        background-color: #2a2a2a;
        border-radius: 8px;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        justify-content: flex-start;
        align-content: flex-start;
    }

    .item-card {
        background-color: #393939;
        width: 120px;
        border-radius: 6px;
        cursor: pointer;
        box-shadow: 0 0 5px #000 inset;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 6px;
        transition: box-shadow 0.2s ease, background-color 0.2s ease;
    }

    .item-card:hover {
        box-shadow: 0 0 8px 2px #ffd700;
        background-color: #ffd700cc;
        color: #000;
    }

    .item-card img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 6px;
        margin-bottom: 6px;
    }

    .item-label {
        font-weight: 600;
        font-size: 0.9rem;
        text-align: center;
        user-select: none;
        color: inherit;
    }

    /* Footer center screen */
    .center-footer {
        margin-top: 10px;
        display: flex;
        gap: 16px;
        justify-content: center;
        background-color: #222;
        padding: 12px 0;
        border-radius: 8px;
        box-shadow: inset 0 0 10px #000;
        user-select: none;
    }

    .footer-btn {
        background-color: #444;
        color: #ffd700;
        border: none;
        padding: 10px 22px;
        font-weight: 600;
        font-size: 1rem;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

    .footer-btn:hover {
        background-color: #ffd700;
        color: #000;
    }

    /* Order side panel */
    .order-side {
        width: 280px;
        background-color: #2c2c2c;
        padding: 10px;
        display: flex;
        flex-direction: column;
        box-shadow: -2px 0 5px rgba(0,0,0,0.7);
    }

    .order-header h3 {
        margin: 10px 0 15px;
        font-weight: 700;
        color: #ffd700;
        user-select: none;
    }

    .order-list {
        list-style: none;
        padding: 0;
        margin: 0;
        overflow-y: auto;
        flex-grow: 1;
    }

    .order-list li {
        padding: 10px;
        border-bottom: 1px solid #444;
        display: flex;
        justify-content: space-between;
        color: #f0f0f0;
        user-select: none;
    }

    .order-list li .qty {
        font-weight: 700;
        color: #ffd700;
    }

    /* Scrollbars (webkit) */
    .side-menu::-webkit-scrollbar,
    .category-tiles::-webkit-scrollbar,
    .items-section::-webkit-scrollbar,
    .order-list::-webkit-scrollbar {
        width: 8px;
    }

    .side-menu::-webkit-scrollbar-thumb,
    .category-tiles::-webkit-scrollbar-thumb,
    .items-section::-webkit-scrollbar-thumb,
    .order-list::-webkit-scrollbar-thumb {
        background-color: #555;
        border-radius: 4px;
    }
</style>

@code {
    private string searchText = "";
    private string categorySearchText = "";

    private List<string> SideMenuItems = new()
    {
        "Home", "Sales", "Inventory", "Reports", "Settings", "Help", "Logout"
    };

    private List<Category> Categories = new()
    {
        new Category { Id=1, Name="Beverages" },
        new Category { Id=2, Name="Snacks" },
        new Category { Id=3, Name="Desserts" },
        new Category { Id=4, Name="Meals" },
        new Category { Id=5, Name="Lunch Specials" },
        new Category { Id=6, Name="Breakfast" },
        new Category { Id=7, Name="Alcohol" },
        new Category { Id=8, Name="Non-Alcoholic" }
    };

    private List<Item> Items = new()
    {
        new Item { Id=1, Name="Coke", CategoryId=1, ImageUrl="https://via.placeholder.com/100x100?text=Coke" },
        new Item { Id=2, Name="Pepsi", CategoryId=1, ImageUrl="https://via.placeholder.com/100x100?text=Pepsi" },
        new Item { Id=3, Name="Chips", CategoryId=2, ImageUrl="https://via.placeholder.com/100x100?text=Chips" },
        new Item { Id=4, Name="Chocolate Cake", CategoryId=3, ImageUrl="https://via.placeholder.com/100x100?text=Cake" },
        new Item { Id=5, Name="Burger", CategoryId=4, ImageUrl="https://via.placeholder.com/100x100?text=Burger" },
        new Item { Id=6, Name="Pancakes", CategoryId=6, ImageUrl="https://via.placeholder.com/100x100?text=Pancakes" },
        new Item { Id=7, Name="Wine", CategoryId=7, ImageUrl="https://via.placeholder.com/100x100?text=Wine" },
        new Item { Id=8, Name="Orange Juice", CategoryId=8, ImageUrl="https://via.placeholder.com/100x100?text=OJ" },
    };

    private List<OrderItem> OrderPlacedItems = new()
    {
        new OrderItem { Name = "Coke", Quantity = 2 },
        new OrderItem { Name = "Burger", Quantity = 1 },
        new OrderItem { Name = "Chips", Quantity = 3 }
    };

    private List<string> FooterOptions = new()
    {
        "Open Order", "Running", "Billed", "Vacant Table"
    };

    private IEnumerable<Category> FilteredCategories =>
        string.IsNullOrWhiteSpace(categorySearchText)
        ? Categories
        : Categories.FindAll(c => c.Name.Contains(categorySearchText, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Item> FilteredItems =>
        string.IsNullOrWhiteSpace(searchText)
        ? Items
        : Items.FindAll(i => i.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
    
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    public class Item
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public int CategoryId { get; set; }
        public string ImageUrl { get; set; } = "";
    }

    public class OrderItem
    {
        public string Name { get; set; } = "";
        public int Quantity { get; set; }
    }
}