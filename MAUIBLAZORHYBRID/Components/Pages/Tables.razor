@page "/tables"
@using MAUIBLAZORHYBRID.Components.Pages.Dialogue
@using MAUIBLAZORHYBRID.Data.DTO
@using MAUIBLAZORHYBRID.Data.Data
@using MAUIBLAZORHYBRID.Services.Sync
@using MudBlazor
@using System.Globalization
@using System.Diagnostics
@inject ISnackbar Snackbar
@layout Components.Layout.POSLayout
@inject PosPageService PosService
@inject TablePageService PageService
@inject IJSRuntime JS
@inject ISyncService SyncService
@inject HttpClient Http
@using System.Text.Json;
@inject NavigationManager Nav
@inject IDialogService DialogService

<MudPaper Class="pos-screen">
    <div class="main-layout">
        <!-- First part: 75-80% width -->
        <div class="left-panel">

            <!-- Body: category list left and item cards right -->
            <div class="body-part">

                <!-- Category list with search box on top -->
                <div class="category-list pa-0">
                    <MudNavMenu Class="category-navmenu pa-0">
                        @foreach (var obj in pageinitdata.DiningSpaces)
                        {
                            <MudNavLink Class="@($"category-link {(obj.diningSpaceId == selectedDiningSpaceId ? "selected" : "")}")"
                            Ripple="false">
                                <MudButton Class="category-card" Variant="Variant.Text" Elevation="2"
                                OnClick="@(() => FilterTableByDiningSpaces(obj.diningSpaceId))">
                                    <MudText Typo="Typo.subtitle1" Class="category-text">
                                        @obj.diningSpaceName
                                    </MudText>
                                </MudButton>
                            </MudNavLink>
                        }
                    </MudNavMenu>
                </div>

                <!-- Items container -->
                <div class="items-container">
                    <MudGrid>
                        @foreach (var table in filteredtabels) // Assuming 'Tabless' is your list of tables
                        {
                            bool isPending = pendingIds.Contains(table.tableId);
                            <MudItem xs="6" sm="4" md="1" lg="1" Class="pa-0">
                                <MudCard Class="@(isPending ? "name-card pending" : "name-card")" @onclick="() => {
                                    if(!isPending)
                                    { GoToKot(table.tableId);}
                                    else{  ShowOrderDetails(table);}}">

                                    <MudCardContent>
                                        <div class="name-display">
                                            <MudText Typo="Typo.subtitle2" Class="table-name" Style="color: var(--text-color); text-align: center;">
                                                @table.tableName
                                            </MudText>
                                            <MudText Typo="Typo.subtitle1" Class="table-name" Style="color: var(--text-color); text-align: center;text-decoration:overline">
                                                @table.noOfSeats
                                            </MudText>
                                        </div>
                                    </MudCardContent>
                                    

                                </MudCard>
                            </MudItem>

                            
                        }
                    </MudGrid>


                </div>
            </div>

            <!-- Footer with status and time -->
        </div>

    </div>
</MudPaper>




@code {
    public OrderDetailsDTO no = new();


    void ShowOrderDetails(Table table)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, CloseButton = true, FullWidth = false };
        DialogService.Show<OrderDetailsDialog>($"Order Detais:- "+table.tableName, new DialogParameters { ["TableId"] = table.tableId }, options);
    }

     int? openPopoverTableId = null;

    void TogglePopover(int tableId)
    {
        if (openPopoverTableId == tableId)
            openPopoverTableId = null; // close if already open
        else
            openPopoverTableId = tableId; // open this one (implicitly closing others)
    }

    void CloseAllPopovers() => openPopoverTableId = null;

    public Origin TransformOrigin { get; set; } = Origin.TopLeft;
    public Origin AnchorOrigin { get; set; } = Origin.CenterCenter;
    private bool _menuOpen;
    private ElementReference? _anchorRef;
    private Table? _currentTable;


    private TablePageDTO pageinitdata = new();

    protected override async Task OnInitializedAsync()
    {
        pageinitdata = await PageService.GetInitData();
        filteredtabels = pageinitdata.Tables;
        orderPendingTables = pageinitdata.NonBilledTables;

        pageinitdata.DiningSpaces.Insert(0, new DiningSpace
        {
            diningSpaceId = 0,
            diningSpaceName = "ALL"
        });

        selectedDiningSpaceId = 0;
    }
    private int? selectedDiningSpaceId;

    public List<Table> filteredtabels = new();
    public List<Table> orderPendingTables = new();
    private HashSet<int> pendingIds => orderPendingTables.Select(t => t.tableId).ToHashSet();

    private void FilterTableByDiningSpaces(int diningSpaceId)
    {
        selectedDiningSpaceId = diningSpaceId;

        if (diningSpaceId==0) filteredtabels=pageinitdata.Tables;
        else{

        var tableIds = pageinitdata.TablesDiningSpaces
           .Where(ic => ic.diningspaceId == selectedDiningSpaceId)
           .Select(ic => ic.tableId)
           .Distinct()
           .ToHashSet();

        filteredtabels = pageinitdata.Tables
           .Where(table => tableIds.Contains(table.tableId))
            .ToList();
        }
    }

    private List<RestaurantTable> Tabless = Enumerable.Range(1, 100).Select(id =>
    {
        var namePrefixes = new[] { "Table", "VIP", "Bar Counter", "Outdoor" };
        var random = new Random(id); // seed with id to make deterministic per run
        string prefix = namePrefixes[random.Next(namePrefixes.Length)];

        return new RestaurantTable
            {
                Id = id,
                Name = $"{prefix} {id}",
                Capacity = random.Next(1, 11), // Capacity between 1 and 10
                Status = random.Next(3) switch // Random status
                {
                    0 => "Available",
                    1 => "Occupied",
                    _ => "Reserved"
                }
            };
    }).ToList();

    void GoToKot(int tableId)
    {
        Nav.NavigateTo($"/kot/{tableId}");
    }
    void OpenOrderMenu(Table table)
    {
        _currentTable = table;
        _menuOpen = true;
        // If using a MudIconButton as anchor, capture its ElementReference via @ref
        // or use programmatic anchor assignment depending on your setup.
    }

    public class RestaurantTable
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Capacity { get; set; }
        public string Status { get; set; }
    }

}


